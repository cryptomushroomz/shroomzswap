{"version":3,"sources":["../../src/utils/pubkeys.ts","../../src/utils/userTokens.ts","../../src/context/TokenList.tsx","../../src/context/Sollet.tsx","../../src/utils/tokens.ts","../../src/context/Token.tsx","../../src/context/Dex.tsx","../../src/context/Swap.tsx","../../src/components/TokenDialog.tsx","../../src/components/OpenOrdersDialog.tsx","../../src/components/Settings.tsx","../../src/components/Info.tsx","../../src/components/Swap.tsx","../../src/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEX_PID","PublicKey","SRM_MINT","USDC_MINT","USDT_MINT","SOL_MINT","WRAPPED_SOL_MINT","WORM_MARKET_BASE","WORM_USDC_MINT","WORM_USDC_MARKET","WORM_USDT_MINT","WORM_USDT_MARKET","fetchSolPrice","a","fetch","response","json","data","priceUsdt","console","error","getUserTokens","pk","tokens","map","token","address","tokenAddress","balance","tokenAmount","uiAmountString","usd","uiAmount","toFixed","filter","t","_TokenListContext","React","createContext","SPL_REGISTRY_SOLLET_TAG","SPL_REGISTRY_WORM_TAG","SOL_TOKEN_INFO","chainId","toString","name","decimals","symbol","logoURI","tags","extensions","website","serumV3Usdc","serumV3Usdt","coingeckoId","waterfallbot","TokenListContextProvider","props","useState","ownedTokensDetailed","setOwnedTokensDetailed","tokenList","useMemo","list","filterByClusterSlug","getList","push","provider","wallet","publicKey","tokenMap","Map","forEach","set","useEffect","solBalance","connection","getBalance","solPrice","SolDetails","swappableTokens","allTokens","ownedTokensList","reduce","p","f","includes","ownedTokens","notOwnedtokens","sort","b","concat","swappableTokensSollet","solletMap","swappableTokensWormhole","wormholeMap","Provider","value","children","useTokenListContext","ctx","useContext","Error","useTokenMap","fetchSolletInfo","mint","undefined","info","_SOLLET_INFO_CACHE","get","swapApiRequest","infoRaw","splMint","requestWormholeSwapMarketIfNeeded","solletMint","wormholeMint","swapMarket","solletInfo","cached","_SWAP_MARKET_EXISTS_CACHE","getAccountInfo","ticker","catch","method","path","body","params","headers","cache","JSON","stringify","resp","handleSwapApiResponse","success","SwapApiError","status","result","msg","filters","getOwnedAccountsFilters","getProgramAccounts","TOKEN_PROGRAM_ID","commitment","accs","pubkey","account","executable","owner","lamports","accountInfo","parseTokenAccountData","Promise","all","ta","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","ata","equals","ACCOUNT_LAYOUT","BufferLayout","decode","amount","BN","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span","_TokenContext","TokenContextProvider","setRefresh","_OWNED_TOKEN_ACCOUNTS_CACHE","length","r","getOwnedAssociatedTokenAccounts","then","acc","useTokenContext","useOwnedTokenAccount","tokenAccounts","tokenAccount","isSol","listener","onAccountChange","index","indexOf","assert","log","removeAccountChangeListener","useMint","asyncMintInfo","useAsync","_MINT_CACHE","mintClient","Account","mintInfo","getMintInfo","FEE_MULTIPLIER","_DexContext","DexContextProvider","ooAccounts","setOoAccounts","swapClient","closeOpenOrders","openOrder","newOoAccounts","openOrders","market","oo","delete","program","OpenOrders","findForOwner","markets","Set","add","size","anchor","rpc","getMultipleAccounts","Array","from","values","m","multipleMarkets","marketClients","programAccount","Market","getLayout","opts","mintPubkeys","baseMintAddress","quoteMintAddress","flat","mints","mintInfos","MintLayout","resolve","baseMintInfo","quoteMintInfo","_baseSplTokenDecimals","_quoteSplTokenDecimals","_MARKET_CACHE","useDexContext","useOpenOrders","useMarket","asyncMarket","marketClient","load","useBbo","orderbook","refresh","asyncOrderbook","_ORDERBOOK_CACHE","loadBids","loadAsks","bids","asks","bidsAddress","OrderbookSide","oldBestBid","items","next","newBestBid","price","asksAddress","oldBestOffer","newBestOffer","useOrderbook","bestBid","bestOffer","mid","useRoute","fromMint","toMint","route","useRouteVerbose","asyncRoute","wormholeSwapMarket","wormholeMarket","kind","WORMHOLE_NATIVE_MAP","wormKey","first","second","conn","wormholeNativeMarket","wormholeSolletMarket","fromWormhole","isFromWormhole","toWormhole","isToWormhole","fromSollet","isFromSollet","toSollet","isToSollet","base","quote","wormholeInfo","erc20Contract","deriveWormholeMarket","baseMint","quoteMint","version","padToTwo","n","slice","seed","createWithSeed","_SwapContext","SwapContextProvider","setFromMint","setToMint","fromAmount","_setFromAmount","toAmount","_setToAmount","isClosingNewAccounts","setIsClosingNewAccounts","isStrict","setIsStrict","slippage","setSlippage","fairOverride","setFairOverride","fair","_useSwapFair","referral","setFromAmount","setToAmount","swapToFromMints","oldFrom","oldTo","useSwapContext","useSwapFair","fairRoute","fromBbo","fromMarket","toBbo","useFairRoute","useStyles","makeStyles","theme","dialogContent","padding","textField","marginBottom","tab","minWidth","tabSelected","color","palette","primary","contrastText","fontWeight","backgroundColor","main","borderRadius","tabIndicator","opacity","TokenDialog","open","onClose","setMint","tabSelection","setTabSelection","tokenFilter","setTokenFilter","toLowerCase","styles","useSwappableTokens","displayTabs","useMediaQuery","selectedTokens","startsWith","Dialog","scroll","PaperProps","style","width","DialogTitle","Typography","variant","paddingBottom","TextField","className","placeholder","fullWidth","onChange","e","target","DialogContent","dividers","List","disablePadding","tokenInfo","TokenListItem","onClick","DialogActions","Tabs","v","classes","indicator","Tab","selected","label","details","ListItem","button","ListItemAvatar","TokenIcon","ListItemText","secondary","Box","mr","textAlign","table","closeAccount","OpenOrdersDialog","maxWidth","display","justifyContent","IconButton","Close","paddingTop","OpenOrdersAccounts","openOrdersEntries","entries","TableContainer","component","Paper","elevation","Table","TableHead","TableRow","TableCell","align","TableBody","oos","OpenOrdersRow","ooAccount","setOoAccount","baseWallet","quoteWallet","baseTicker","quoteTicker","marketName","settleDisabled","baseTokenFree","toNumber","quoteTokenFree","closeDisabled","baseTokenTotal","quoteTokenTotal","settleFunds","makeSettleFundsTransaction","transaction","signers","send","_closeOpenOrders","accounts","authority","destination","dexProgram","scope","Link","href","rel","Select","MenuItem","toDisplay","sub","Button","disabled","settingsButton","closeAccountSwitchLabel","text","fairAutoSelected","fairAuto","type","light","boxShadow","SettingsButton","popupState","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","SettingsDetails","showSettingsDialog","setShowSettingsDialog","marginTop","fontSize","parseFloat","flexDirection","InputProps","endAdornment","InputAdornment","position","marginRight","flex","margin","CloseNewAccountsSwitch","FormGroup","row","FormControlLabel","labelPlacement","marginLeft","control","Switch","checked","infoLabel","alignItems","infoButton","InfoLabel","fromMintInfo","fromTokenInfo","toTokenInfo","InfoButton","Info","disableRestoreFocus","InfoDetails","addresses","MarketRoute","overflow","useMarketName","bbo","card","spacing","swapButton","swapToFromButton","cursor","amountInput","input","swapTokenFormContainer","swapTokenSelectorContainer","balanceContainer","maxButton","tokenButton","SwapCard","containerStyle","contentStyle","swapTokenContainerStyle","Card","SwapHeader","SwapFromForm","ArrowButton","SwapToForm","SwapButton","useTheme","ImportExportRounded","htmlColor","SwapTokenForm","setAmount","showTokenDialog","setShowTokenDialog","mintAccount","formattedAmount","toLocaleString","maximumFractionDigits","useGrouping","TokenButton","disableUnderline","root","TokenName","ExpandMore","alt","src","toMintInfo","toMarket","canSwap","fromWallet","useCanSwap","asyncReferral","useReferral","toWallet","sendSwapTransaction","wrappedSolAccount","Keypair","generate","minExchangeRate","rate","muln","divn","fromDecimals","quoteDecimals","strict","fromOpenOrders","toOpenOrders","fromWalletAddr","toWalletAddr","swapTxs","close","txs","wrapSol","wrapTx","tx","wrapSigners","unwrapSol","unwrapTx","unwrapSigners","Transaction","sendAll","SystemProgram","getMinBalanceRentForExemptAccount","fromPubkey","newAccountPubkey","space","programId","createAccount","transfer","toPubkey","createInitAccountInstruction","createCloseAccountInstruction","Swap","materialTheme","SwapClient","createTheme","background","default","paper","ThemeProvider","minHeight","paddingLeft","paddingRight","AppInner","enqueueSnackbar","useSnackbar","setIsConnected","setTokenList","newWallet","useWallet","newConnection","useConnection","newProvider","preflightCommitment","network","Wallet","Connection","NotifyingProvider","err","action","TokenListProvider","on","Grid","container","right","top","onTransaction","txSig","this","txSigs","sig","App","wallets","getPhantomWallet","getSolletWallet","endpoint","maxSnack","autoHideDuration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.047439ae.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\n\nexport const DEX_PID = new PublicKey(\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\"\n);\n\nexport const SRM_MINT = new PublicKey(\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n);\n\nexport const USDC_MINT = new PublicKey(\n  \"2vRgBSJEVPXxayrhXoazQyCKSGFYQG3ZdfT2Gv5gZykL\"\n);\n\nexport const USDT_MINT = new PublicKey(\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\n);\n\n// Arbitrary mint to represent SOL (not wrapped SOL).\nexport const SOL_MINT = new PublicKey(\n  \"Ejmc1UB4EsES5oAaRN63SpoxMJidt3ZGBrqrZk49vjTZ\"\n);\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const WORM_MARKET_BASE = new PublicKey(\n  \"6a9wpsZpZGxGhFVSQBpcTNjNjytdbSA1iUw1A5KNDxPw\"\n);\n\nexport const WORM_USDC_MINT = new PublicKey(\n  \"FVsXUnbhifqJ4LiXQEbpUtXVdB8T5ADLKqSs5t1oc54F\"\n);\n\nexport const WORM_USDC_MARKET = new PublicKey(\n  \"6nGMps9VfDjkKEwYjdSNqN1ToXkLae4VsN49fzBiDFBd\"\n);\n\nexport const WORM_USDT_MINT = new PublicKey(\n  \"9w97GdWUYYaamGwdKMKZgGzPduZJkiFizq4rz5CPXRv2\"\n);\n\nexport const WORM_USDT_MARKET = new PublicKey(\n  \"4v6e6vNXAaEunrvbqkYnKwbaWfck8a2KVR4uRAVXxVwC\"\n);\n","export type OwnedTokenDetailed = {\n  address: string;\n  balance: string;\n  usd: number;\n};\n\nexport const fetchSolPrice = async (): Promise<number> => {\n  try {\n    const response = await fetch(\"https://api.solscan.io/market?symbol=SOL\");\n    const json = await response.json();\n    return json.data.priceUsdt;\n  } catch (error) {\n    console.error(error);\n    return 0;\n  }\n};\n\n// TODO: use web3 library\nexport const getUserTokens = async (\n  pk?: string\n): Promise<OwnedTokenDetailed[]> => {\n  let data: OwnedTokenDetailed[] = [];\n\n  // for testing\n  // pk = \"CuieVDEDtLo7FypA9SbLM9saXFdb1dsshEkyErMqkRQq\"\n\n  try {\n    if (pk) {\n      let tokens = await (\n        await fetch(\n          `https://api.solscan.io/account/tokens?address=${pk}&price=1`\n        )\n      ).json();\n      data = tokens.data.map((token: any) => {\n        return {\n          address: token.tokenAddress,\n          balance: token.tokenAmount.uiAmountString,\n          usd: +(token.tokenAmount.uiAmount * (token.priceUsdt ?? 0)).toFixed(\n            4\n          ),\n        };\n      });\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return data.filter((t: OwnedTokenDetailed) => +t.balance > 0);\n};\n","import React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { SOL_MINT } from \"../utils/pubkeys\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  fetchSolPrice,\n  getUserTokens,\n  OwnedTokenDetailed,\n} from \"../utils/userTokens\";\n\ntype TokenListContext = {\n  tokenMap: Map<string, TokenInfo>;\n  wormholeMap: Map<string, TokenInfo>;\n  solletMap: Map<string, TokenInfo>;\n  swappableTokens: TokenInfo[];\n  swappableTokensSollet: TokenInfo[];\n  swappableTokensWormhole: TokenInfo[];\n  ownedTokensDetailed: OwnedTokenDetailed[];\n};\nconst _TokenListContext = React.createContext<null | TokenListContext>(null);\n\n// Tag in the spl-token-registry for sollet wrapped tokens.\nexport const SPL_REGISTRY_SOLLET_TAG = \"wrapped-sollet\";\n\n// Tag in the spl-token-registry for wormhole wrapped tokens.\nexport const SPL_REGISTRY_WORM_TAG = \"wormhole\";\n\nconst SOL_TOKEN_INFO = {\n  chainId: 101,\n  address: SOL_MINT.toString(),\n  name: \"Native SOL\",\n  decimals: \"9\",\n  symbol: \"SOL\",\n  logoURI:\n    \"https://cdn.jsdelivr.net/gh/trustwallet/assets@master/blockchains/solana/info/logo.png\",\n  tags: [],\n  extensions: {\n    website: \"https://solana.com/\",\n    serumV3Usdc: \"9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT\",\n    serumV3Usdt: \"HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1\",\n    coingeckoId: \"solana\",\n    waterfallbot: \"https://t.me/SOLwaterfall\",\n  },\n};\n\nexport function TokenListContextProvider(props: any) {\n  const [ownedTokensDetailed, setOwnedTokensDetailed] = useState<\n    OwnedTokenDetailed[]\n  >([]);\n\n  const tokenList = useMemo(() => {\n    const list = props.tokenList.filterByClusterSlug(\"mainnet-beta\").getList();\n    // Manually add a fake SOL mint for the native token. The component is\n    // opinionated in that it distinguishes between wrapped SOL and SOL.\n    list.push(SOL_TOKEN_INFO);\n    return list;\n  }, [props.tokenList]);\n\n  const pk: PublicKey | undefined = props?.provider?.wallet?.publicKey;\n\n  // Token map for quick lookup.\n  const tokenMap = useMemo(() => {\n    const tokenMap = new Map();\n    tokenList.forEach((t: TokenInfo) => {\n      tokenMap.set(t.address, t);\n    });\n    return tokenMap;\n  }, [tokenList]);\n\n  useEffect(() => {\n    (async () => {\n      let solBalance: number = 0;\n      if (pk) solBalance = await props.provider.connection.getBalance(pk);\n      const tokens = await getUserTokens(pk?.toString());\n      const solPrice = await fetchSolPrice();\n\n      solBalance = solBalance / 10 ** +SOL_TOKEN_INFO.decimals;\n\n      const SolDetails = {\n        address: SOL_TOKEN_INFO.address,\n        balance: solBalance.toFixed(6),\n        usd: +(solBalance * solPrice).toFixed(4),\n      };\n      // only show the sol token if wallet is connected\n      if (pk) {\n        setOwnedTokensDetailed([SolDetails, ...tokens]);\n      } else {\n        // on disconnect, tokens = []\n        setOwnedTokensDetailed(tokens);\n      }\n    })();\n  }, [pk]);\n\n  // Tokens with USD(x) quoted markets.\n  const swappableTokens = useMemo(() => {\n    const allTokens = tokenList.filter((t: TokenInfo) => {\n      const isUsdxQuoted =\n        t.extensions?.serumV3Usdt || t.extensions?.serumV3Usdc;\n      return isUsdxQuoted;\n    });\n\n    const ownedTokensList = ownedTokensDetailed.map((t) => t.address);\n\n    // Partition allTokens (pass & fail reduce)\n    const [ownedTokens, notOwnedtokens] = allTokens.reduce(\n      ([p, f]: [TokenInfo[], TokenInfo[]], t: TokenInfo) =>\n        // pass & fail condition\n        ownedTokensList.includes(t.address) ? [[...p, t], f] : [p, [...f, t]],\n      [[], []]\n    );\n    notOwnedtokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    // sort by price in USD\n    ownedTokens.sort(\n      (a: TokenInfo, b: TokenInfo) =>\n        +ownedTokensDetailed.filter((t: any) => t.address === b.address)?.[0]\n          .usd -\n        +ownedTokensDetailed.filter((t: any) => t.address === a.address)?.[0]\n          .usd\n    );\n    const tokens = ownedTokens.concat(notOwnedtokens);\n\n    return tokens;\n  }, [tokenList, tokenMap, ownedTokensDetailed]);\n\n  // Sollet wrapped tokens.\n  const [swappableTokensSollet, solletMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_SOLLET_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  // Wormhole wrapped tokens.\n  const [swappableTokensWormhole, wormholeMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_WORM_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  return (\n    <_TokenListContext.Provider\n      value={{\n        tokenMap,\n        wormholeMap,\n        solletMap,\n        swappableTokens,\n        swappableTokensWormhole,\n        swappableTokensSollet,\n        ownedTokensDetailed,\n      }}\n    >\n      {props.children}\n    </_TokenListContext.Provider>\n  );\n}\n\nexport function useTokenListContext(): TokenListContext {\n  const ctx = useContext(_TokenListContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useTokenMap(): Map<string, TokenInfo> {\n  const { tokenMap } = useTokenListContext();\n  return tokenMap;\n}\n\nexport function useSwappableTokens() {\n  const { swappableTokens, swappableTokensWormhole, swappableTokensSollet } =\n    useTokenListContext();\n  return { swappableTokens, swappableTokensWormhole, swappableTokensSollet };\n}\n","import { useAsync, UseAsyncReturn } from \"react-async-hook\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\n// Token info tracked by the sollet bridge.\ntype SolletInfo = {\n  blockchain: string;\n  erc20Contract: string;\n  name: string;\n  splMint: PublicKey;\n  ticker: string;\n};\n\nexport function useSolletInfo(mint: PublicKey): UseAsyncReturn<SolletInfo> {\n  return useAsync(async () => {\n    return fetchSolletInfo(mint);\n  }, [mint]);\n}\n\n// Fetches the token info from the sollet bridge.\nexport async function fetchSolletInfo(mint: PublicKey): Promise<SolletInfo> {\n  let info = _SOLLET_INFO_CACHE.get(mint.toString());\n  if (info !== undefined) {\n    return info;\n  }\n\n  const infoRaw = await swapApiRequest(\"GET\", `coins/sol/${mint.toString()}`);\n  info = { ...infoRaw, splMint: new PublicKey(infoRaw.splMint) };\n  _SOLLET_INFO_CACHE.set(mint.toString(), info!);\n\n  return info!;\n}\n\n// Requests the creation of a sollet wormhole swap market, if it doesn't\n// already exist. Note: this triggers a creation notification. Creation\n// doesn't happen immediately, but at some unspecified point in the future\n// since market makers need to setup on the swap market and provide liquidity.\n//\n// Returns true if the market exists already. False otherwise.\nexport async function requestWormholeSwapMarketIfNeeded(\n  connection: Connection,\n  solletMint: PublicKey,\n  wormholeMint: PublicKey,\n  swapMarket: PublicKey,\n  solletInfo: SolletInfo\n): Promise<boolean> {\n  const cached = _SWAP_MARKET_EXISTS_CACHE.get(swapMarket.toString());\n  if (cached !== undefined) {\n    return cached;\n  }\n  const acc = await connection.getAccountInfo(swapMarket);\n  if (acc === null) {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), false);\n    const resource = `wormhole/pool/${\n      solletInfo.ticker\n    }/${swapMarket.toString()}/${solletMint.toString()}/${wormholeMint.toString()}`;\n    swapApiRequest(\"POST\", resource).catch(console.error);\n    return false;\n  } else {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), true);\n    return true;\n  }\n}\n\nexport async function swapApiRequest(\n  method: string,\n  path: string,\n  body?: Object\n) {\n  let headers: any = {};\n  let params: any = { headers, method };\n  if (method === \"GET\") {\n    params.cache = \"no-cache\";\n  } else if (body) {\n    headers[\"Content-Type\"] = \"application/json\";\n    params.body = JSON.stringify(body);\n  }\n  let resp = await fetch(`https://swap.sollet.io/api/${path}`, params);\n  return await handleSwapApiResponse(resp);\n}\n\nasync function handleSwapApiResponse(resp: Response) {\n  let json = await resp.json();\n  if (!json.success) {\n    throw new SwapApiError(json.error, resp.status);\n  }\n  return json.result;\n}\n\nexport class SwapApiError extends Error {\n  readonly name: string;\n  readonly status: number;\n  constructor(msg: string, status: number) {\n    super(msg);\n    this.name = \"SwapApiError\";\n    this.status = status;\n  }\n}\n\nconst _SOLLET_INFO_CACHE = new Map<string, SolletInfo>();\nconst _SWAP_MARKET_EXISTS_CACHE = new Map<string, boolean>();\n","// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport {\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  AccountInfo as TokenAccount,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport async function getOwnedAssociatedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection.getProgramAccounts(TOKEN_PROGRAM_ID, {\n    commitment: connection.commitment,\n    filters,\n  });\n\n  const accs = resp\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data,\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n\n  return (\n    (\n      await Promise.all(\n        accs\n          // @ts-ignore\n          .map(async (ta) => {\n            const ata = await Token.getAssociatedTokenAddress(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              ta.account.mint,\n              publicKey\n            );\n            return [ta, ata];\n          })\n      )\n    )\n      // @ts-ignore\n      .filter(([ta, ata]) => ta.publicKey.equals(ata))\n      // @ts-ignore\n      .map(([ta]) => ta)\n  );\n}\n\nconst ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nexport function parseTokenAccountData(data: Buffer): TokenAccount {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  // @ts-ignore\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport * as assert from \"assert\";\nimport { useAsync } from \"react-async-hook\";\nimport { Provider, BN } from \"@project-serum/anchor\";\nimport { PublicKey, Account } from \"@solana/web3.js\";\nimport {\n  MintInfo,\n  AccountInfo as TokenAccount,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  getOwnedAssociatedTokenAccounts,\n  parseTokenAccountData,\n} from \"../utils/tokens\";\nimport { SOL_MINT } from \"../utils/pubkeys\";\n\nexport type TokenContext = {\n  provider: Provider;\n};\nconst _TokenContext = React.createContext<TokenContext | null>(null);\n\nexport function TokenContextProvider(props: any) {\n  const provider = props.provider;\n  const [, setRefresh] = useState(0);\n\n  // Fetch all the owned token accounts for the wallet.\n  useEffect(() => {\n    if (!provider.wallet.publicKey) {\n      _OWNED_TOKEN_ACCOUNTS_CACHE.length = 0;\n      setRefresh((r) => r + 1);\n      return;\n    }\n    // Fetch SPL tokens.\n    getOwnedAssociatedTokenAccounts(\n      provider.connection,\n      provider.wallet.publicKey\n    ).then((accs) => {\n      if (accs) {\n        // @ts-ignore\n        _OWNED_TOKEN_ACCOUNTS_CACHE.push(...accs);\n        setRefresh((r) => r + 1);\n      }\n    });\n    // Fetch SOL balance.\n    provider.connection\n      .getAccountInfo(provider.wallet.publicKey)\n      .then((acc: { lamports: number }) => {\n        if (acc) {\n          _OWNED_TOKEN_ACCOUNTS_CACHE.push({\n            publicKey: provider.wallet.publicKey,\n            // @ts-ignore\n            account: {\n              amount: new BN(acc.lamports),\n              mint: SOL_MINT,\n            },\n          });\n          setRefresh((r) => r + 1);\n        }\n      });\n  }, [provider.wallet.publicKey, provider.connection]);\n\n  return (\n    <_TokenContext.Provider\n      value={{\n        provider,\n      }}\n    >\n      {props.children}\n    </_TokenContext.Provider>\n  );\n}\n\nfunction useTokenContext() {\n  const ctx = useContext(_TokenContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\n// Null => none exists.\n// Undefined => loading.\nexport function useOwnedTokenAccount(\n  mint?: PublicKey\n): { publicKey: PublicKey; account: TokenAccount } | null | undefined {\n  const { provider } = useTokenContext();\n  const [, setRefresh] = useState(0);\n  const tokenAccounts = _OWNED_TOKEN_ACCOUNTS_CACHE.filter(\n    (account) => mint && account.account.mint.equals(mint)\n  );\n\n  // Take the account with the most tokens in it.\n  tokenAccounts.sort((a, b) =>\n    a.account.amount > b.account.amount\n      ? -1\n      : a.account.amount < b.account.amount\n      ? 1\n      : 0\n  );\n\n  let tokenAccount = tokenAccounts[0];\n  const isSol = mint?.equals(SOL_MINT);\n\n  // Stream updates when the balance changes.\n  useEffect(() => {\n    let listener: number;\n    // SOL is special cased since it's not an SPL token.\n    if (tokenAccount && isSol) {\n      listener = provider.connection.onAccountChange(\n        provider.wallet.publicKey,\n        (info: { lamports: number }) => {\n          const token = {\n            amount: new BN(info.lamports),\n            mint: SOL_MINT,\n          } as TokenAccount;\n          if (token.amount !== tokenAccount.account.amount) {\n            const index = _OWNED_TOKEN_ACCOUNTS_CACHE.indexOf(tokenAccount);\n            assert.ok(index >= 0);\n            _OWNED_TOKEN_ACCOUNTS_CACHE[index].account = token;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    // SPL tokens.\n    else if (tokenAccount) {\n      listener = provider.connection.onAccountChange(\n        tokenAccount.publicKey,\n        (info) => {\n          if (info.data.length !== 0) {\n            try {\n              const token = parseTokenAccountData(info.data);\n              if (token.amount !== tokenAccount.account.amount) {\n                const index = _OWNED_TOKEN_ACCOUNTS_CACHE.indexOf(tokenAccount);\n                assert.ok(index >= 0);\n                _OWNED_TOKEN_ACCOUNTS_CACHE[index].account = token;\n                setRefresh((r) => r + 1);\n              }\n            } catch (error) {\n              console.log(\"Failed to decode token AccountInfo\");\n            }\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        provider.connection.removeAccountChangeListener(listener);\n      }\n    };\n  }, [provider.connection, tokenAccount]);\n\n  if (mint === undefined) {\n    return undefined;\n  }\n\n  if (!isSol && tokenAccounts.length === 0) {\n    return null;\n  }\n\n  return tokenAccount;\n}\n\nexport function useMint(mint?: PublicKey): MintInfo | undefined | null {\n  const { provider } = useTokenContext();\n  // Lazy load the mint account if needeed.\n  const asyncMintInfo = useAsync(async () => {\n    if (!mint) {\n      return undefined;\n    }\n    if (_MINT_CACHE.get(mint.toString())) {\n      return _MINT_CACHE.get(mint.toString());\n    }\n\n    const mintClient = new Token(\n      provider.connection,\n      mint,\n      TOKEN_PROGRAM_ID,\n      new Account()\n    );\n    const mintInfo = mintClient.getMintInfo();\n    _MINT_CACHE.set(mint.toString(), mintInfo);\n    return mintInfo;\n  }, [provider.connection, mint]);\n\n  if (asyncMintInfo.result) {\n    return asyncMintInfo.result;\n  }\n  return undefined;\n}\n\nexport function setMintCache(pk: PublicKey, account: MintInfo) {\n  _MINT_CACHE.set(pk.toString(), new Promise((resolve) => resolve(account)));\n}\n\n// Cache storing all token accounts for the connected wallet provider.\nconst _OWNED_TOKEN_ACCOUNTS_CACHE: Array<{\n  publicKey: PublicKey;\n  account: TokenAccount;\n}> = [];\n\n// Cache storing all previously fetched mint infos.\n// @ts-ignore\nconst _MINT_CACHE = new Map<string, Promise<MintInfo>>([\n  [SOL_MINT.toString(), { decimals: 9 }],\n]);\n","import React, { useContext, useState, useEffect } from \"react\";\nimport * as assert from \"assert\";\nimport { useAsync } from \"react-async-hook\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { MintLayout } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  Market,\n  OpenOrders,\n  Orderbook as OrderbookSide,\n} from \"@project-serum/serum\";\nimport {\n  DEX_PID,\n  USDC_MINT,\n  USDT_MINT,\n  SOL_MINT,\n  WRAPPED_SOL_MINT,\n  WORM_USDC_MINT,\n  WORM_USDT_MINT,\n  WORM_USDC_MARKET,\n  WORM_USDT_MARKET,\n  WORM_MARKET_BASE,\n} from \"../utils/pubkeys\";\nimport { useTokenMap, useTokenListContext } from \"./TokenList\";\nimport { fetchSolletInfo, requestWormholeSwapMarketIfNeeded } from \"./Sollet\";\nimport { setMintCache } from \"./Token\";\n\nconst BASE_TAKER_FEE_BPS = 0.0022;\nexport const FEE_MULTIPLIER = 1 - BASE_TAKER_FEE_BPS;\n\ntype DexContext = {\n  // Maps market address to open orders accounts.\n  openOrders: Map<string, Array<OpenOrders>>;\n  closeOpenOrders: (openOrder: OpenOrders) => void;\n  swapClient: SwapClient;\n};\nconst _DexContext = React.createContext<DexContext | null>(null);\n\nexport function DexContextProvider(props: any) {\n  const [ooAccounts, setOoAccounts] = useState<Map<string, Array<OpenOrders>>>(\n    new Map()\n  );\n  const swapClient = props.swapClient;\n\n  // Removes the given open orders from the context.\n  const closeOpenOrders = async (openOrder: OpenOrders) => {\n    const newOoAccounts = new Map(ooAccounts);\n    const openOrders = newOoAccounts\n      .get(openOrder.market.toString())\n      ?.filter((oo: OpenOrders) => !oo.address.equals(openOrder.address));\n    if (openOrders && openOrders.length > 0) {\n      newOoAccounts.set(openOrder.market.toString(), openOrders);\n    } else {\n      newOoAccounts.delete(openOrder.market.toString());\n    }\n    setOoAccounts(newOoAccounts);\n  };\n\n  // Three operations:\n  //\n  // 1. Fetch all open orders accounts for the connected wallet.\n  // 2. Batch fetch all market accounts for those open orders.\n  // 3. Batch fetch all mints associated with the markets.\n  useEffect(() => {\n    if (!swapClient.program.provider.wallet.publicKey) {\n      setOoAccounts(new Map());\n      return;\n    }\n    OpenOrders.findForOwner(\n      swapClient.program.provider.connection,\n      swapClient.program.provider.wallet.publicKey,\n      DEX_PID\n    ).then(async (openOrders) => {\n      const newOoAccounts = new Map();\n      let markets = new Set<string>();\n      openOrders.forEach((oo) => {\n        markets.add(oo.market.toString());\n        if (newOoAccounts.get(oo.market.toString())) {\n          newOoAccounts.get(oo.market.toString()).push(oo);\n        } else {\n          newOoAccounts.set(oo.market.toString(), [oo]);\n        }\n      });\n      if (markets.size > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\n          \"Too many markets. Please file an issue to update this\"\n        );\n      }\n      const multipleMarkets = await anchor.utils.rpc.getMultipleAccounts(\n        swapClient.program.provider.connection,\n        Array.from(markets.values()).map((m) => new PublicKey(m))\n      );\n      const marketClients = multipleMarkets.map((programAccount) => {\n        return {\n          publicKey: programAccount?.publicKey,\n          account: new Market(\n            Market.getLayout(DEX_PID).decode(programAccount?.account.data),\n            -1, // Set below so that we can batch fetch mints.\n            -1, // Set below so that we can batch fetch mints.\n            swapClient.program.provider.opts,\n            DEX_PID\n          ),\n        };\n      });\n\n      setOoAccounts(newOoAccounts);\n\n      // Batch fetch all the mints, since we know we'll need them at some\n      // point.\n      const mintPubkeys = Array.from(\n        new Set<string>(\n          marketClients\n            .map((m) => [\n              m.account.baseMintAddress.toString(),\n              m.account.quoteMintAddress.toString(),\n            ])\n            .flat()\n        ).values()\n      ).map((pk) => new PublicKey(pk));\n\n      if (mintPubkeys.length > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\"Too many mints. Please file an issue to update this\");\n      }\n\n      const mints = await anchor.utils.rpc.getMultipleAccounts(\n        swapClient.program.provider.connection,\n        mintPubkeys\n      );\n      const mintInfos = mints.map((mint) => {\n        const mintInfo = MintLayout.decode(mint!.account.data);\n        setMintCache(mint!.publicKey, mintInfo);\n        return { publicKey: mint!.publicKey, mintInfo };\n      });\n\n      marketClients.forEach((m) => {\n        const baseMintInfo = mintInfos.filter((mint) =>\n          mint.publicKey.equals(m.account.baseMintAddress)\n        )[0];\n        const quoteMintInfo = mintInfos.filter((mint) =>\n          mint.publicKey.equals(m.account.quoteMintAddress)\n        )[0];\n        assert.ok(baseMintInfo && quoteMintInfo);\n        // @ts-ignore\n        m.account._baseSplTokenDecimals = baseMintInfo.mintInfo.decimals;\n        // @ts-ignore\n        m.account._quoteSplTokenDecimals = quoteMintInfo.mintInfo.decimals;\n        _MARKET_CACHE.set(\n          m.publicKey!.toString(),\n          new Promise<Market>((resolve) => resolve(m.account))\n        );\n      });\n    });\n  }, [\n    swapClient.program.provider.connection,\n    swapClient.program.provider.wallet.publicKey,\n    swapClient.program.provider.opts,\n  ]);\n  return (\n    <_DexContext.Provider\n      value={{\n        openOrders: ooAccounts,\n        closeOpenOrders,\n        swapClient,\n      }}\n    >\n      {props.children}\n    </_DexContext.Provider>\n  );\n}\n\nexport function useDexContext(): DexContext {\n  const ctx = useContext(_DexContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useOpenOrders(): Map<string, Array<OpenOrders>> {\n  const ctx = useDexContext();\n  return ctx.openOrders;\n}\n\n// Lazy load a given market.\nexport function useMarket(market?: PublicKey): Market | undefined {\n  const { swapClient } = useDexContext();\n\n  const asyncMarket = useAsync(async () => {\n    if (!market) {\n      return undefined;\n    }\n    if (_MARKET_CACHE.get(market.toString())) {\n      return _MARKET_CACHE.get(market.toString());\n    }\n\n    const marketClient = new Promise<Market>(async (resolve) => {\n      // TODO: if we already have the mints, then pass them through to the\n      //       market client here to save a network request.\n      const marketClient = await Market.load(\n        swapClient.program.provider.connection,\n        market,\n        swapClient.program.provider.opts,\n        DEX_PID\n      );\n      resolve(marketClient);\n    });\n\n    _MARKET_CACHE.set(market.toString(), marketClient);\n    return marketClient;\n  }, [swapClient.program.provider.connection, market]);\n\n  if (asyncMarket.result) {\n    return asyncMarket.result;\n  }\n\n  return undefined;\n}\n\n// Lazy load the orderbook for a given market.\nexport function useOrderbook(market?: PublicKey): Orderbook | undefined {\n  const { swapClient } = useDexContext();\n  const marketClient = useMarket(market);\n  const [refresh, setRefresh] = useState(0);\n\n  const asyncOrderbook = useAsync(async () => {\n    if (!market || !marketClient) {\n      return undefined;\n    }\n    if (_ORDERBOOK_CACHE.get(market.toString())) {\n      return _ORDERBOOK_CACHE.get(market.toString());\n    }\n\n    const orderbook = new Promise<Orderbook>(async (resolve) => {\n      const [bids, asks] = await Promise.all([\n        marketClient.loadBids(swapClient.program.provider.connection),\n        marketClient.loadAsks(swapClient.program.provider.connection),\n      ]);\n\n      resolve({\n        bids,\n        asks,\n      });\n    });\n\n    _ORDERBOOK_CACHE.set(market.toString(), orderbook);\n\n    return orderbook;\n  }, [refresh, swapClient.program.provider.connection, market, marketClient]);\n\n  // Stream in bids updates.\n  useEffect(() => {\n    let listener: number | undefined;\n    if (marketClient?.bidsAddress) {\n      listener = swapClient.program.provider.connection.onAccountChange(\n        marketClient?.bidsAddress,\n        async (info) => {\n          const bids = OrderbookSide.decode(marketClient, info.data);\n          const orderbook = await _ORDERBOOK_CACHE.get(\n            marketClient.address.toString()\n          );\n          const oldBestBid = orderbook?.bids.items(true).next().value;\n          const newBestBid = bids.items(true).next().value;\n          if (\n            orderbook &&\n            oldBestBid &&\n            newBestBid &&\n            oldBestBid.price !== newBestBid.price\n          ) {\n            orderbook.bids = bids;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        swapClient.program.provider.connection.removeAccountChangeListener(\n          listener\n        );\n      }\n    };\n  }, [\n    marketClient,\n    marketClient?.bidsAddress,\n    swapClient.program.provider.connection,\n  ]);\n\n  // Stream in asks updates.\n  useEffect(() => {\n    let listener: number | undefined;\n    if (marketClient?.asksAddress) {\n      listener = swapClient.program.provider.connection.onAccountChange(\n        marketClient?.asksAddress,\n        async (info) => {\n          const asks = OrderbookSide.decode(marketClient, info.data);\n          const orderbook = await _ORDERBOOK_CACHE.get(\n            marketClient.address.toString()\n          );\n          const oldBestOffer = orderbook?.asks.items(false).next().value;\n          const newBestOffer = asks.items(false).next().value;\n          if (\n            orderbook &&\n            oldBestOffer &&\n            newBestOffer &&\n            oldBestOffer.price !== newBestOffer.price\n          ) {\n            orderbook.asks = asks;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        swapClient.program.provider.connection.removeAccountChangeListener(\n          listener\n        );\n      }\n    };\n  }, [\n    marketClient,\n    marketClient?.bidsAddress,\n    swapClient.program.provider.connection,\n  ]);\n\n  if (asyncOrderbook.result) {\n    return asyncOrderbook.result;\n  }\n\n  return undefined;\n}\n\nexport function useMarketName(market: PublicKey): string | null {\n  const tokenMap = useTokenMap();\n  const marketClient = useMarket(market);\n  if (!marketClient) {\n    return null;\n  }\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const name = `${baseTicker} / ${quoteTicker}`;\n  return name;\n}\n\n// Fair price for a given market, as defined by the mid.\nexport function useBbo(market?: PublicKey): Bbo | undefined {\n  const orderbook = useOrderbook(market);\n  if (orderbook === undefined) {\n    return undefined;\n  }\n  const bestBid = orderbook.bids.items(true).next().value;\n  const bestOffer = orderbook.asks.items(false).next().value;\n  if (!bestBid && !bestOffer) {\n    return {};\n  }\n  if (!bestBid) {\n    return { bestOffer: bestOffer.price };\n  }\n  if (!bestOffer) {\n    return { bestBid: bestBid.price };\n  }\n  const mid = (bestBid.price + bestOffer.price) / 2.0;\n  return { bestBid: bestBid.price, bestOffer: bestOffer.price, mid };\n}\n\n// Fair price for a theoretical toMint/fromMint market. I.e., the number\n// of `fromMint` tokens to purchase a single `toMint` token. Aggregates\n// across a trade route, if needed.\nexport function useFairRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): number | undefined {\n  const route = useRoute(fromMint, toMint);\n  const fromBbo = useBbo(route ? route[0] : undefined);\n  const fromMarket = useMarket(route ? route[0] : undefined);\n  const toBbo = useBbo(route ? route[1] : undefined);\n\n  if (route === null) {\n    return undefined;\n  }\n\n  if (route.length === 1 && fromBbo !== undefined) {\n    if (fromMarket === undefined) {\n      return undefined;\n    }\n    if (\n      fromMarket?.baseMintAddress.equals(fromMint) ||\n      (fromMarket?.baseMintAddress.equals(WRAPPED_SOL_MINT) &&\n        fromMint.equals(SOL_MINT))\n    ) {\n      return fromBbo.bestBid && 1.0 / fromBbo.bestBid;\n    } else {\n      return fromBbo.bestOffer && fromBbo.bestOffer;\n    }\n  }\n  if (\n    fromBbo === undefined ||\n    fromBbo.bestBid === undefined ||\n    toBbo === undefined ||\n    toBbo.bestOffer === undefined\n  ) {\n    return undefined;\n  }\n  return toBbo.bestOffer / fromBbo.bestBid;\n}\n\nexport function useRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): Array<PublicKey> | null {\n  const route = useRouteVerbose(fromMint, toMint);\n  if (route === null) {\n    return null;\n  }\n  return route.markets;\n}\n\n// Types of routes.\n//\n// 1. Direct trades on USDC quoted markets.\n// 2. Transitive trades across two USDC qutoed markets.\n// 3. Wormhole <-> Sollet one-to-one swap markets.\n// 4. Wormhole <-> Native one-to-one swap markets.\n//\nexport function useRouteVerbose(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): { markets: Array<PublicKey>; kind: RouteKind } | null {\n  const { swapClient } = useDexContext();\n  const { wormholeMap, solletMap } = useTokenListContext();\n  const asyncRoute = useAsync(async () => {\n    const swapMarket = await wormholeSwapMarket(\n      swapClient.program.provider.connection,\n      fromMint,\n      toMint,\n      wormholeMap,\n      solletMap\n    );\n    if (swapMarket !== null) {\n      const [wormholeMarket, kind] = swapMarket;\n      return { markets: [wormholeMarket], kind };\n    }\n    const markets = swapClient.route(\n      fromMint.equals(SOL_MINT) ? WRAPPED_SOL_MINT : fromMint,\n      toMint.equals(SOL_MINT) ? WRAPPED_SOL_MINT : toMint\n    );\n    if (markets === null) {\n      return null;\n    }\n    const kind: RouteKind = \"usdx\";\n    return { markets, kind };\n  }, [fromMint, toMint, swapClient]);\n\n  if (asyncRoute.result) {\n    return asyncRoute.result;\n  }\n  return null;\n}\n\ntype Orderbook = {\n  bids: OrderbookSide;\n  asks: OrderbookSide;\n};\n\n// Wormhole utils.\n\ntype RouteKind = \"wormhole-native\" | \"wormhole-sollet\" | \"usdx\";\n\n// Maps fromMint || toMint (in sort order) to swap market public key.\n// All markets for wormhole<->native tokens should be here, e.g.\n// USDC <-> wUSDC.\nconst WORMHOLE_NATIVE_MAP = new Map<string, PublicKey>([\n  [wormKey(WORM_USDC_MINT, USDC_MINT), WORM_USDC_MARKET],\n  [wormKey(WORM_USDT_MINT, USDT_MINT), WORM_USDT_MARKET],\n]);\n\nfunction wormKey(fromMint: PublicKey, toMint: PublicKey): string {\n  const [first, second] =\n    fromMint < toMint ? [fromMint, toMint] : [toMint, fromMint];\n  return first.toString() + second.toString();\n}\n\nasync function wormholeSwapMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<[PublicKey, RouteKind] | null> {\n  let market = wormholeNativeMarket(fromMint, toMint);\n  if (market !== null) {\n    return [market, \"wormhole-native\"];\n  }\n  market = await wormholeSolletMarket(\n    conn,\n    fromMint,\n    toMint,\n    wormholeMap,\n    solletMap\n  );\n  if (market === null) {\n    return null;\n  }\n  return [market, \"wormhole-sollet\"];\n}\n\nfunction wormholeNativeMarket(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): PublicKey | null {\n  return WORMHOLE_NATIVE_MAP.get(wormKey(fromMint, toMint)) ?? null;\n}\n\n// Returns the market address of the 1-1 sollet<->wormhole swap market if it\n// exists. Otherwise, returns null.\nasync function wormholeSolletMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<PublicKey | null> {\n  const fromWormhole = wormholeMap.get(fromMint.toString());\n  const isFromWormhole = fromWormhole !== undefined;\n\n  const toWormhole = wormholeMap.get(toMint.toString());\n  const isToWormhole = toWormhole !== undefined;\n\n  const fromSollet = solletMap.get(fromMint.toString());\n  const isFromSollet = fromSollet !== undefined;\n\n  const toSollet = solletMap.get(toMint.toString());\n  const isToSollet = toSollet !== undefined;\n\n  if ((isFromWormhole || isToWormhole) && isFromWormhole !== isToWormhole) {\n    if ((isFromSollet || isToSollet) && isFromSollet !== isToSollet) {\n      const base = isFromSollet ? fromMint : toMint;\n      const [quote, wormholeInfo] = isFromWormhole\n        ? [fromMint, fromWormhole]\n        : [toMint, toWormhole];\n\n      const solletInfo = await fetchSolletInfo(base);\n\n      if (solletInfo.erc20Contract !== wormholeInfo!.extensions?.address) {\n        return null;\n      }\n\n      const market = await deriveWormholeMarket(base, quote);\n      if (market === null) {\n        return null;\n      }\n\n      const marketExists = await requestWormholeSwapMarketIfNeeded(\n        conn,\n        base,\n        quote,\n        market,\n        solletInfo\n      );\n      if (!marketExists) {\n        return null;\n      }\n\n      return market;\n    }\n  }\n  return null;\n}\n\n// Calculates the deterministic address for the sollet<->wormhole 1-1 swap\n// market.\nasync function deriveWormholeMarket(\n  baseMint: PublicKey,\n  quoteMint: PublicKey,\n  version = 0\n): Promise<PublicKey | null> {\n  if (version > 99) {\n    console.log(\"Swap market version cannot be greater than 99\");\n    return null;\n  }\n  if (version < 0) {\n    console.log(\"Version cannot be less than zero\");\n    return null;\n  }\n\n  const padToTwo = (n: number) => (n <= 99 ? `0${n}`.slice(-2) : n);\n  const seed =\n    baseMint.toString().slice(0, 15) +\n    quoteMint.toString().slice(0, 15) +\n    padToTwo(version);\n  return await PublicKey.createWithSeed(WORM_MARKET_BASE, seed, DEX_PID);\n}\n\ntype Bbo = {\n  bestBid?: number;\n  bestOffer?: number;\n  mid?: number;\n};\n\nconst _ORDERBOOK_CACHE = new Map<string, Promise<Orderbook>>();\nconst _MARKET_CACHE = new Map<string, Promise<Market>>();\n","import * as assert from \"assert\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  Token,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Market } from \"@project-serum/serum\";\nimport { SRM_MINT, USDC_MINT, USDT_MINT } from \"../utils/pubkeys\";\nimport {\n  useFairRoute,\n  useRouteVerbose,\n  useDexContext,\n  FEE_MULTIPLIER,\n} from \"./Dex\";\nimport {\n  useTokenListContext,\n  SPL_REGISTRY_SOLLET_TAG,\n  SPL_REGISTRY_WORM_TAG,\n} from \"./TokenList\";\nimport { useOwnedTokenAccount } from \"../context/Token\";\n\nconst DEFAULT_SLIPPAGE_PERCENT = 0.5;\n\nexport type SwapContext = {\n  // Mint being traded from. The user must own these tokens.\n  fromMint: PublicKey;\n  setFromMint: (m: PublicKey) => void;\n\n  // Mint being traded to. The user will receive these tokens after the swap.\n  toMint: PublicKey;\n  setToMint: (m: PublicKey) => void;\n\n  // Amount used for the swap.\n  fromAmount: number;\n  setFromAmount: (a: number) => void;\n\n  // *Expected* amount received from the swap.\n  toAmount: number;\n  setToAmount: (a: number) => void;\n\n  // Function to flip what we consider to be the \"to\" and \"from\" mints.\n  swapToFromMints: () => void;\n\n  // The amount (in units of percent) a swap can be off from the estimate\n  // shown to the user.\n  slippage: number;\n  setSlippage: (n: number) => void;\n\n  // Null if the user is using fairs directly from DEX prices.\n  // Otherwise, a user specified override for the price to use when calculating\n  // swap amounts.\n  fairOverride: number | null;\n  setFairOverride: (n: number | null) => void;\n\n  // The referral *owner* address. Associated token accounts must be created,\n  // first, for this to be used.\n  referral?: PublicKey;\n\n  // True if all newly created market accounts should be closed in the\n  // same user flow (ideally in the same transaction).\n  isClosingNewAccounts: boolean;\n\n  // True if the swap exchange rate should be a function of nothing but the\n  // from and to tokens, ignoring any quote tokens that may have been\n  // accumulated by performing the swap.\n  //\n  // Always false (for now).\n  isStrict: boolean;\n  setIsStrict: (isStrict: boolean) => void;\n\n  setIsClosingNewAccounts: (b: boolean) => void;\n};\nconst _SwapContext = React.createContext<null | SwapContext>(null);\n\nexport function SwapContextProvider(props: any) {\n  const [fromMint, setFromMint] = useState(props.fromMint ?? SRM_MINT);\n  const [toMint, setToMint] = useState(props.toMint ?? USDC_MINT);\n  const [fromAmount, _setFromAmount] = useState(props.fromAmount ?? 0);\n  const [toAmount, _setToAmount] = useState(props.toAmount ?? 0);\n  const [isClosingNewAccounts, setIsClosingNewAccounts] = useState(false);\n  const [isStrict, setIsStrict] = useState(false);\n  const [slippage, setSlippage] = useState(DEFAULT_SLIPPAGE_PERCENT);\n  const [fairOverride, setFairOverride] = useState<number | null>(null);\n  const fair = _useSwapFair(fromMint, toMint, fairOverride);\n  const referral = props.referral;\n\n  assert.ok(slippage >= 0);\n\n  useEffect(() => {\n    if (!fair) {\n      return;\n    }\n    setFromAmount(fromAmount);\n  }, [fair]);\n\n  const swapToFromMints = () => {\n    const oldFrom = fromMint;\n    const oldTo = toMint;\n    const oldToAmount = toAmount;\n    _setFromAmount(oldToAmount);\n    setFromMint(oldTo);\n    setToMint(oldFrom);\n  };\n\n  const setFromAmount = (amount: number) => {\n    if (fair === undefined) {\n      _setFromAmount(0);\n      _setToAmount(0);\n      return;\n    }\n    _setFromAmount(amount);\n    _setToAmount(FEE_MULTIPLIER * (amount / fair));\n  };\n\n  const setToAmount = (amount: number) => {\n    if (fair === undefined) {\n      _setFromAmount(0);\n      _setToAmount(0);\n      return;\n    }\n    _setToAmount(amount);\n    _setFromAmount((amount * fair) / FEE_MULTIPLIER);\n  };\n\n  return (\n    <_SwapContext.Provider\n      value={{\n        fromMint,\n        setFromMint,\n        toMint,\n        setToMint,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        swapToFromMints,\n        slippage,\n        setSlippage,\n        fairOverride,\n        setFairOverride,\n        isClosingNewAccounts,\n        isStrict,\n        setIsStrict,\n        setIsClosingNewAccounts,\n        referral,\n      }}\n    >\n      {props.children}\n    </_SwapContext.Provider>\n  );\n}\n\nexport function useSwapContext(): SwapContext {\n  const ctx = useContext(_SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useSwapFair(): number | undefined {\n  const { fairOverride, fromMint, toMint } = useSwapContext();\n  return _useSwapFair(fromMint, toMint, fairOverride);\n}\n\nfunction _useSwapFair(\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  fairOverride: number | null\n): number | undefined {\n  const fairRoute = useFairRoute(fromMint, toMint);\n  const fair = fairOverride === null ? fairRoute : fairOverride;\n  return fair;\n}\n\n// Returns true if the user can swap with the current context.\nexport function useCanSwap(): boolean {\n  const { fromMint, toMint, fromAmount, toAmount } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const { wormholeMap, solletMap } = useTokenListContext();\n  const fromWallet = useOwnedTokenAccount(fromMint);\n  const fair = useSwapFair();\n  const route = useRouteVerbose(fromMint, toMint);\n  if (route === null) {\n    return false;\n  }\n\n  return (\n    // From wallet exists.\n    fromWallet !== undefined &&\n    fromWallet !== null &&\n    // Fair price is defined.\n    fair !== undefined &&\n    fair > 0 &&\n    // Mints are distinct.\n    fromMint.equals(toMint) === false &&\n    // Wallet is connected.\n    swapClient.program.provider.wallet.publicKey !== null &&\n    // Trade amounts greater than zero.\n    fromAmount > 0 &&\n    toAmount > 0 &&\n    // Trade route exists.\n    route !== null &&\n    // Wormhole <-> native markets must have the wormhole token as the\n    // *from* address since they're one-sided markets.\n    (route.kind !== \"wormhole-native\" ||\n      wormholeMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_WORM_TAG) !== undefined) &&\n    // Wormhole <-> sollet markets must have the sollet token as the\n    // *from* address since they're one sided markets.\n    (route.kind !== \"wormhole-sollet\" ||\n      solletMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_SOLLET_TAG) !== undefined)\n  );\n}\n\nexport function useReferral(fromMarket?: Market): PublicKey | undefined {\n  const { referral } = useSwapContext();\n  const asyncReferral = useAsync(async () => {\n    if (!referral) {\n      return undefined;\n    }\n    if (!fromMarket) {\n      return undefined;\n    }\n    if (\n      !fromMarket.quoteMintAddress.equals(USDC_MINT) &&\n      !fromMarket.quoteMintAddress.equals(USDT_MINT)\n    ) {\n      return undefined;\n    }\n\n    return Token.getAssociatedTokenAddress(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      fromMarket.quoteMintAddress,\n      referral\n    );\n  }, [fromMarket]);\n\n  if (!asyncReferral.result) {\n    return undefined;\n  }\n  return asyncReferral.result;\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  List,\n  ListItem,\n  Typography,\n  Tabs,\n  Tab,\n  ListItemText,\n  ListItemAvatar,\n  Box,\n} from \"@material-ui/core\";\nimport { TokenIcon } from \"./Swap\";\nimport { useSwappableTokens, useTokenListContext } from \"../context/TokenList\";\nimport { useMediaQuery } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  dialogContent: {\n    padding: 0,\n  },\n  textField: {\n    marginBottom: \"8px\",\n  },\n  tab: {\n    minWidth: \"134px\",\n  },\n  tabSelected: {\n    color: theme.palette.primary.contrastText,\n    fontWeight: 700,\n    backgroundColor: theme.palette.primary.main,\n    borderRadius: \"10px\",\n  },\n  tabIndicator: {\n    opacity: 0,\n  },\n}));\n\nexport default function TokenDialog({\n  open,\n  onClose,\n  setMint,\n}: {\n  open: boolean;\n  onClose: () => void;\n  setMint: (mint: PublicKey) => void;\n}) {\n  const [tabSelection, setTabSelection] = useState(0);\n  const [tokenFilter, setTokenFilter] = useState(\"\");\n  const filter = tokenFilter.toLowerCase();\n  const styles = useStyles();\n  const { swappableTokens, swappableTokensSollet, swappableTokensWormhole } =\n    useSwappableTokens();\n  const displayTabs = !useMediaQuery(\"(max-width:450px)\");\n  const selectedTokens =\n    tabSelection === 0\n      ? swappableTokens\n      : tabSelection === 1\n      ? swappableTokensWormhole\n      : swappableTokensSollet;\n  let tokens =\n    tokenFilter === \"\"\n      ? selectedTokens\n      : selectedTokens.filter(\n          (t) =>\n            t.symbol.toLowerCase().startsWith(filter) ||\n            t.name.toLowerCase().startsWith(filter) ||\n            t.address.toLowerCase().startsWith(filter)\n        );\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      scroll={\"paper\"}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n          width: \"420px\",\n        },\n      }}\n    >\n      <DialogTitle style={{ fontWeight: \"bold\" }}>\n        <Typography variant=\"h6\" style={{ paddingBottom: \"16px\" }}>\n          Select a token\n        </Typography>\n        <TextField\n          className={styles.textField}\n          placeholder={\"Search name\"}\n          value={tokenFilter}\n          fullWidth\n          variant=\"outlined\"\n          onChange={(e) => setTokenFilter(e.target.value)}\n        />\n      </DialogTitle>\n      <DialogContent className={styles.dialogContent} dividers={true}>\n        <List disablePadding>\n          {tokens.map((tokenInfo: TokenInfo) => (\n            <TokenListItem\n              key={tokenInfo.address}\n              tokenInfo={tokenInfo}\n              onClick={(mint) => {\n                setMint(mint);\n                onClose();\n              }}\n            />\n          ))}\n        </List>\n      </DialogContent>\n      {displayTabs && (\n        <DialogActions>\n          <Tabs\n            value={tabSelection}\n            onChange={(e, v) => setTabSelection(v)}\n            classes={{\n              indicator: styles.tabIndicator,\n            }}\n          >\n            <Tab\n              value={0}\n              className={styles.tab}\n              classes={{ selected: styles.tabSelected }}\n              label=\"SHROOMZ Selection\"\n            />\n\n          </Tabs>\n        </DialogActions>\n      )}\n    </Dialog>\n  );\n}\n\nfunction TokenListItem({\n  tokenInfo,\n  onClick,\n}: {\n  tokenInfo: TokenInfo;\n  onClick: (mint: PublicKey) => void;\n}) {\n  const mint = new PublicKey(tokenInfo.address);\n  const { ownedTokensDetailed } = useTokenListContext();\n  const details = ownedTokensDetailed.filter(\n    (t) => t.address === tokenInfo.address\n  )?.[0];\n\n  return (\n    <ListItem\n      button\n      onClick={() => onClick(mint)}\n      style={{ padding: \"10px 20px\" }}\n    >\n      <ListItemAvatar>\n        <TokenIcon\n          mint={mint}\n          style={{ width: \"30px\", borderRadius: \"15px\" }}\n        />\n      </ListItemAvatar>\n      <ListItemText primary={tokenInfo?.symbol} secondary={tokenInfo?.name} />\n      {+details?.balance > 0 && (\n        <Box mr={1} textAlign=\"end\">\n          <ListItemText\n            primary={details?.balance}\n            secondary={`$${details?.usd}`}\n          />\n        </Box>\n      )}\n    </ListItem>\n  );\n}\n","import { useState, useMemo, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { BN } from \"@project-serum/anchor\";\nimport { OpenOrders } from \"@project-serum/serum\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogContent,\n  Paper,\n  Table,\n  TableRow,\n  TableHead,\n  TableCell,\n  TableBody,\n  TableContainer,\n  IconButton,\n  Typography,\n  Button,\n  Select,\n  MenuItem,\n  Link,\n} from \"@material-ui/core\";\nimport { Close } from \"@material-ui/icons\";\nimport { useMarket, useOpenOrders, useDexContext } from \"../context/Dex\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\nimport { DEX_PID } from \"../utils/pubkeys\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {},\n  closeAccount: {\n    color: theme.palette.error.main,\n  },\n}));\n\nexport default function OpenOrdersDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog\n      maxWidth=\"lg\"\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n        },\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n        }}\n      >\n        <IconButton\n          onClick={onClose}\n          style={{\n            padding: 10,\n          }}\n        >\n          <Close />\n        </IconButton>\n      </div>\n      <DialogContent style={{ paddingTop: 0 }}>\n        <OpenOrdersAccounts />\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction OpenOrdersAccounts() {\n  const styles = useStyles();\n  const openOrders = useOpenOrders();\n  const openOrdersEntries: Array<[PublicKey, OpenOrders[]]> = useMemo(() => {\n    return Array.from(openOrders.entries()).map(([market, oo]) => [\n      new PublicKey(market),\n      oo,\n    ]);\n  }, [openOrders]);\n  return (\n    <TableContainer component={Paper} elevation={0}>\n      <Table className={styles.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Market</TableCell>\n            <TableCell align=\"center\">Open Orders Account</TableCell>\n            <TableCell align=\"center\">Base Used</TableCell>\n            <TableCell align=\"center\">Base Free</TableCell>\n            <TableCell align=\"center\">Quote Used</TableCell>\n            <TableCell align=\"center\">Quote Free</TableCell>\n            <TableCell align=\"center\">Settle</TableCell>\n            <TableCell align=\"center\">Close</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {openOrdersEntries.map(([market, oos]) => {\n            return (\n              <OpenOrdersRow\n                key={market.toString()}\n                market={market}\n                openOrders={oos}\n              />\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction OpenOrdersRow({\n  market,\n  openOrders,\n}: {\n  market: PublicKey;\n  openOrders: Array<OpenOrders>;\n}) {\n  const styles = useStyles();\n  const [ooAccount, setOoAccount] = useState(openOrders[0]);\n  useEffect(() => {\n    setOoAccount(openOrders[0]);\n  }, [openOrders]);\n  const { swapClient, closeOpenOrders } = useDexContext();\n  const marketClient = useMarket(market);\n  const tokenMap = useTokenMap();\n  const base = useMint(marketClient?.baseMintAddress);\n  const quote = useMint(marketClient?.quoteMintAddress);\n  const baseWallet = useOwnedTokenAccount(marketClient?.baseMintAddress);\n  const quoteWallet = useOwnedTokenAccount(marketClient?.quoteMintAddress);\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const marketName =\n    baseTicker && quoteTicker\n      ? `${baseTicker} / ${quoteTicker}`\n      : market.toString();\n  const settleDisabled =\n    ooAccount.baseTokenFree.toNumber() + ooAccount.quoteTokenFree.toNumber() ===\n    0;\n  const closeDisabled =\n    ooAccount.baseTokenTotal.toNumber() +\n      ooAccount.quoteTokenTotal.toNumber() !==\n    0;\n\n  const settleFunds = async () => {\n    if (!marketClient) {\n      throw new Error(\"Market client not found\");\n    }\n    if (!baseWallet || !quoteWallet) {\n      throw new Error(\"Base or quote wallet not found\");\n    }\n    const referrerWallet = undefined;\n    const { transaction, signers } =\n      await marketClient.makeSettleFundsTransaction(\n        swapClient.program.provider.connection,\n        ooAccount,\n        baseWallet.publicKey,\n        quoteWallet.publicKey,\n        referrerWallet\n      );\n    await swapClient.program.provider.send(transaction, signers);\n  };\n\n  const _closeOpenOrders = async () => {\n    await swapClient.program.rpc.closeAccount({\n      accounts: {\n        openOrders: ooAccount.address,\n        authority: swapClient.program.provider.wallet.publicKey,\n        destination: swapClient.program.provider.wallet.publicKey,\n        market: marketClient!.address,\n        dexProgram: DEX_PID,\n      },\n    });\n    closeOpenOrders(ooAccount);\n  };\n\n  return (\n    <TableRow key={market.toString()}>\n      <TableCell component=\"th\" scope=\"row\">\n        <Typography>\n          <Link\n            href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            {marketName}\n          </Link>\n        </Typography>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Select\n          value={ooAccount.address.toString()}\n          onChange={(e) =>\n            setOoAccount(\n              openOrders.filter(\n                (oo) => oo.address.toString() === e.target.value\n              )[0]\n            )\n          }\n        >\n          {openOrders.map((oo) => {\n            return (\n              <MenuItem\n                key={oo.address.toString()}\n                value={oo.address.toString()}\n              >\n                {oo.address.toString()}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenTotal.sub(ooAccount.baseTokenFree))}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(\n          quote,\n          ooAccount.quoteTokenTotal.sub(ooAccount.quoteTokenFree)\n        )}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(quote, ooAccount.quoteTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button color=\"primary\" disabled={settleDisabled} onClick={settleFunds}>\n          Settle\n        </Button>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button\n          disabled={closeDisabled}\n          onClick={_closeOpenOrders}\n          className={styles.closeAccount}\n        >\n          Close\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nfunction toDisplay(mintInfo: MintInfo | undefined | null, value: BN): string {\n  if (!mintInfo) {\n    return value.toNumber().toString();\n  }\n  return (value.toNumber() / 10 ** mintInfo.decimals).toFixed(\n    mintInfo.decimals\n  );\n}\n","import { useState } from \"react\";\nimport {\n  makeStyles,\n  Popover,\n  IconButton,\n  Typography,\n  Button,\n  TextField,\n  InputAdornment,\n  Switch,\n  FormControlLabel,\n  FormGroup,\n} from \"@material-ui/core\";\nimport { SettingsOutlined as Settings } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport { useDexContext } from \"../context/Dex\";\nimport OpenOrdersDialog from \"./OpenOrdersDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  tab: {\n    width: \"50%\",\n  },\n  table: {},\n  settingsButton: {\n    padding: 0,\n    color: theme.palette.primary.main,\n  },\n  closeAccountSwitchLabel: {\n    color: theme.palette.text.secondary,\n  },\n  fairAutoSelected: {\n    backgroundColor: theme.palette.primary.main,\n    padding: \"3px 5px\",\n    borderRadius: \"10px\",\n    color: theme.palette.primary.contrastText,\n    fontWeight: 700,\n  },\n  fairAuto: {\n    backgroundColor:\n      theme.palette.type === \"dark\"\n        ? theme.palette.secondary.light\n        : theme.palette.secondary.main,\n    padding: \"3px 5px\",\n    borderRadius: \"10px\",\n    boxShadow: \"none\",\n  },\n}));\n\nexport function SettingsButton() {\n  const styles = useStyles();\n\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.settingsButton}\n            >\n              <Settings />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{\n                style: {\n                  borderRadius: \"10px\",\n                  boxShadow: \"0px 0px 30px 5px rgba(0,0,0,0.075)\",\n                },\n              }}\n            >\n              <SettingsDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction SettingsDetails() {\n  const styles = useStyles();\n\n  const { slippage, setSlippage, fairOverride, setFairOverride } =\n    useSwapContext();\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\n  const fair = useSwapFair();\n  const { swapClient } = useDexContext();\n\n  const setSlippageHandler = (value?: number) => {\n    setSlippage(!value || value < 0 ? 0 : value);\n  };\n\n  return (\n    <div style={{ padding: \"15px\", width: \"305px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>Settings</Typography>\n      <div>\n        <div style={{ marginTop: \"10px\" }}>\n          <Typography color=\"textSecondary\" style={{ fontSize: \"12px\" }}>\n            Slippage tolerance\n          </Typography>\n          <TextField\n            type=\"number\"\n            placeholder=\"Error tolerance percentage\"\n            value={slippage}\n            onChange={(e) => setSlippageHandler(parseFloat(e.target.value))}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n          />\n        </div>\n        <div style={{ marginTop: \"10px\" }}>\n          <Typography color=\"textSecondary\" style={{ fontSize: \"12px\" }}>\n            Fair price\n          </Typography>\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              type=\"number\"\n              placeholder=\"Fair price override\"\n              value={fair}\n              onChange={(e) => setFairOverride(parseFloat(e.target.value))}\n              style={{\n                marginRight: \"10px\",\n                flex: 1,\n                display: \"flex\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n              }}\n              disabled={fairOverride === null}\n            />\n            <Button\n              component=\"div\"\n              variant=\"contained\"\n              onClick={() => {\n                if (fair === undefined) {\n                  console.error(\"Fair is undefined\");\n                  return;\n                }\n                if (fairOverride === null) {\n                  setFairOverride(fair);\n                } else {\n                  setFairOverride(null);\n                }\n              }}\n              className={\n                fairOverride === null\n                  ? styles.fairAutoSelected\n                  : styles.fairAuto\n              }\n            >\n              Auto\n            </Button>\n          </div>\n        </div>\n        <div style={{ margin: \"10px 0px\" }}>\n          <CloseNewAccountsSwitch />\n        </div>\n        <Button\n          variant=\"contained\"\n          fullWidth\n          disabled={swapClient.program.provider.wallet.publicKey === null}\n          onClick={() => setShowSettingsDialog(true)}\n        >\n          Manage Dex Accounts\n        </Button>\n      </div>\n      <OpenOrdersDialog\n        open={showSettingsDialog}\n        onClose={() => setShowSettingsDialog(false)}\n      />\n    </div>\n  );\n}\n\nfunction CloseNewAccountsSwitch() {\n  const styles = useStyles();\n  const { isClosingNewAccounts, setIsClosingNewAccounts } = useSwapContext();\n\n  return (\n    <FormGroup style={{ display: \"none\" }} row>\n      <FormControlLabel\n        classes={{ label: styles.closeAccountSwitchLabel }}\n        labelPlacement=\"start\"\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          marginLeft: 0,\n          width: \"100%\",\n        }}\n        control={\n          <Switch\n            checked={isClosingNewAccounts}\n            onChange={() => setIsClosingNewAccounts(!isClosingNewAccounts)}\n            color=\"primary\"\n          />\n        }\n        label=\"Close new accounts\"\n      />\n    </FormGroup>\n  );\n}\n","import {\n  makeStyles,\n  Typography,\n  Link,\n  Popover,\n  IconButton,\n} from \"@material-ui/core\";\nimport { Info } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport { useMint } from \"../context/Token\";\nimport { useRoute, useMarketName, useBbo } from \"../context/Dex\";\n\nconst useStyles = makeStyles(() => ({\n  infoLabel: {\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n  },\n  infoButton: {\n    marginLeft: \"5px\",\n    padding: 0,\n    fontSize: \"14px\",\n  },\n}));\n\nexport function InfoLabel() {\n  const styles = useStyles();\n\n  const { fromMint, toMint } = useSwapContext();\n  const fromMintInfo = useMint(fromMint);\n  const fair = useSwapFair();\n\n  const tokenMap = useTokenMap();\n  let fromTokenInfo = tokenMap.get(fromMint.toString());\n  let toTokenInfo = tokenMap.get(toMint.toString());\n\n  return (\n    <div className={styles.infoLabel}>\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n        {fair !== undefined && toTokenInfo && fromTokenInfo\n          ? `1 ${toTokenInfo.symbol} = ${fair.toFixed(\n              fromMintInfo?.decimals\n            )} ${fromTokenInfo.symbol}`\n          : `-`}\n      </Typography>\n      <InfoButton />\n    </div>\n  );\n}\n\nfunction InfoButton() {\n  const styles = useStyles();\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div style={{ display: \"flex\" }}>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.infoButton}\n            >\n              <Info fontSize=\"small\" />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{ style: { borderRadius: \"10px\" } }}\n              disableRestoreFocus\n            >\n              <InfoDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction InfoDetails() {\n  const { fromMint, toMint } = useSwapContext();\n  const route = useRoute(fromMint, toMint);\n  const tokenMap = useTokenMap();\n  const fromMintTicker = tokenMap.get(fromMint.toString())?.symbol;\n  const toMintTicker = tokenMap.get(toMint.toString())?.symbol;\n  const addresses = [\n    { ticker: fromMintTicker, mint: fromMint },\n    { ticker: toMintTicker, mint: toMint },\n  ];\n\n  return (\n    <div style={{ padding: \"15px\", width: \"250px\" }}>\n      <div>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Trade Route\n        </Typography>\n        {route ? (\n          route.map((market: PublicKey) => {\n            return <MarketRoute key={market.toString()} market={market} />;\n          })\n        ) : (\n          <Typography color=\"textSecondary\">Route not found</Typography>\n        )}\n      </div>\n      <div style={{ marginTop: \"15px\" }}>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Tokens\n        </Typography>\n        {addresses.map((address) => {\n          return (\n            <div\n              key={address.mint.toString()}\n              style={{\n                marginTop: \"5px\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Link\n                href={`https://explorer.solana.com/address/${address.mint.toString()}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                {address.ticker}\n              </Link>\n              <code style={{ width: \"128px\", overflow: \"hidden\" }}>\n                {address.mint.toString()}\n              </code>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction MarketRoute({ market }: { market: PublicKey }) {\n  const marketName = useMarketName(market);\n  const bbo = useBbo(market);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginTop: \"5px\",\n      }}\n    >\n      <Link\n        href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        {marketName}\n      </Link>\n      <code style={{ marginLeft: \"10px\" }}>\n        {bbo && bbo.mid ? bbo.mid.toFixed(6) : \"-\"}\n      </code>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport {\n  PublicKey,\n  Keypair,\n  Transaction,\n  SystemProgram,\n  Signer,\n} from \"@solana/web3.js\";\nimport { Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { BN, Provider } from \"@project-serum/anchor\";\nimport {\n  makeStyles,\n  Card,\n  Button,\n  Typography,\n  TextField,\n  useTheme,\n} from \"@material-ui/core\";\nimport { ExpandMore, ImportExportRounded } from \"@material-ui/icons\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport {\n  useDexContext,\n  useOpenOrders,\n  useRouteVerbose,\n  useMarket,\n  FEE_MULTIPLIER,\n} from \"../context/Dex\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\nimport { useCanSwap, useReferral } from \"../context/Swap\";\nimport TokenDialog from \"./TokenDialog\";\nimport { SettingsButton } from \"./Settings\";\nimport { InfoLabel } from \"./Info\";\nimport { SOL_MINT, WRAPPED_SOL_MINT } from \"../utils/pubkeys\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    width: theme.spacing(50),\n    borderRadius: theme.spacing(2),\n    boxShadow: \"0px 0px 30px 5px rgba(0,0,0,0.075)\",\n    padding: theme.spacing(2),\n  },\n  tab: {\n    width: \"50%\",\n  },\n  settingsButton: {\n    padding: 0,\n  },\n  swapButton: {\n    width: \"100%\",\n    borderRadius: theme.spacing(2),\n    backgroundColor: theme.palette.primary.main,\n    color: 'theme.palette.primary.contrastText',\n    fontSize: 16,\n    fontWeight: 700,\n    padding: theme.spacing(1.5),\n  },\n  swapToFromButton: {\n    display: \"block\",\n    margin: \"10px auto 10px auto\",\n    cursor: \"pointer\",\n  },\n  amountInput: {\n    fontSize: 22,\n    fontWeight: 600,\n  },\n  input: {\n    textAlign: \"right\",\n  },\n  swapTokenFormContainer: {\n    borderRadius: theme.spacing(2),\n    boxShadow: \"0px 0px 15px 2px rgba(33,150,243,0.1)\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: theme.spacing(1),\n  },\n  swapTokenSelectorContainer: {\n    marginLeft: theme.spacing(1),\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"50%\",\n  },\n  balanceContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"14px\",\n  },\n  maxButton: {\n    marginLeft: theme.spacing(1),\n    color: theme.palette.primary.main,\n    fontWeight: 700,\n    fontSize: \"12px\",\n    cursor: \"pointer\",\n  },\n  tokenButton: {\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport default function SwapCard({\n  containerStyle,\n  contentStyle,\n  swapTokenContainerStyle,\n}: {\n  containerStyle?: any;\n  contentStyle?: any;\n  swapTokenContainerStyle?: any;\n}) {\n  const styles = useStyles();\n  return (\n    <Card className={styles.card} style={containerStyle}>\n      <SwapHeader />\n      <div style={contentStyle}>\n        <SwapFromForm style={swapTokenContainerStyle} />\n        <ArrowButton />\n        <SwapToForm style={swapTokenContainerStyle} />\n        <InfoLabel />\n        <SwapButton />\n      </div>\n    </Card>\n  );\n}\n\nexport function SwapHeader() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginBottom: \"16px\",\n      }}\n    >\n      <Typography\n        style={{\n          fontSize: 18,\n          fontWeight: 700,\n          color: \"gold\",\n        }}\n      >\n        SHROOMZ SWAP\n      </Typography>\n      <SettingsButton />\n    </div>\n  );\n}\n\nexport function ArrowButton() {\n  const styles = useStyles();\n  const theme = useTheme();\n  const { swapToFromMints } = useSwapContext();\n  return (\n    <ImportExportRounded\n      className={styles.swapToFromButton}\n      fontSize=\"large\"\n      htmlColor={theme.palette.primary.main}\n      onClick={swapToFromMints}\n    />\n  );\n}\n\nfunction SwapFromForm({ style }: { style?: any }) {\n  const { fromMint, setFromMint, fromAmount, setFromAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      from\n      style={style}\n      mint={fromMint}\n      setMint={setFromMint}\n      amount={fromAmount}\n      setAmount={setFromAmount}\n    />\n  );\n}\n\nfunction SwapToForm({ style }: { style?: any }) {\n  const { toMint, setToMint, toAmount, setToAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      from={false}\n      style={style}\n      mint={toMint}\n      setMint={setToMint}\n      amount={toAmount}\n      setAmount={setToAmount}\n    />\n  );\n}\n\nexport function SwapTokenForm({\n  from,\n  style,\n  mint,\n  setMint,\n  amount,\n  setAmount,\n}: {\n  from: boolean;\n  style?: any;\n  mint: PublicKey;\n  setMint: (m: PublicKey) => void;\n  amount: number;\n  setAmount: (a: number) => void;\n}) {\n  const styles = useStyles();\n\n  const [showTokenDialog, setShowTokenDialog] = useState(false);\n  const tokenAccount = useOwnedTokenAccount(mint);\n  const mintAccount = useMint(mint);\n\n  const balance =\n    tokenAccount &&\n    mintAccount &&\n    tokenAccount.account.amount.toNumber() / 10 ** mintAccount.decimals;\n\n  const formattedAmount =\n    mintAccount && amount\n      ? amount.toLocaleString(\"fullwide\", {\n          maximumFractionDigits: mintAccount.decimals,\n          useGrouping: false,\n        })\n      : amount;\n\n  return (\n    <div className={styles.swapTokenFormContainer} style={style}>\n      <div className={styles.swapTokenSelectorContainer}>\n        <TokenButton mint={mint} onClick={() => setShowTokenDialog(true)} />\n        <Typography color=\"textSecondary\" className={styles.balanceContainer}>\n          {tokenAccount && mintAccount\n            ? `Balance: ${balance?.toFixed(mintAccount.decimals)}`\n            : `-`}\n          {from && !!balance ? (\n            <span\n              className={styles.maxButton}\n              onClick={() => setAmount(balance)}\n            >\n              MAX\n            </span>\n          ) : null}\n        </Typography>\n      </div>\n      <TextField\n        type=\"number\"\n        value={formattedAmount}\n        onChange={(e) => setAmount(parseFloat(e.target.value))}\n        InputProps={{\n          disableUnderline: true,\n          classes: {\n            root: styles.amountInput,\n            input: styles.input,\n          },\n        }}\n      />\n      <TokenDialog\n        setMint={setMint}\n        open={showTokenDialog}\n        onClose={() => setShowTokenDialog(false)}\n      />\n    </div>\n  );\n}\n\nfunction TokenButton({\n  mint,\n  onClick,\n}: {\n  mint: PublicKey;\n  onClick: () => void;\n}) {\n  const styles = useStyles();\n  const theme = useTheme();\n\n  return (\n    <div onClick={onClick} className={styles.tokenButton}>\n      <TokenIcon mint={mint} style={{ width: theme.spacing(4) }} />\n      <TokenName mint={mint} style={{ fontSize: 14, fontWeight: 700 }} />\n      <ExpandMore />\n    </div>\n  );\n}\n\nexport function TokenIcon({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenMap = useTokenMap();\n  let tokenInfo = tokenMap.get(mint.toString());\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {tokenInfo?.logoURI ? (\n        <img alt=\"Logo\" style={style} src={tokenInfo?.logoURI} />\n      ) : (\n        <div style={style}></div>\n      )}\n    </div>\n  );\n}\n\nfunction TokenName({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenMap = useTokenMap();\n  const theme = useTheme();\n  let tokenInfo = tokenMap.get(mint.toString());\n\n  return (\n    <Typography\n      style={{\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(1),\n        ...style,\n      }}\n    >\n      {tokenInfo?.symbol}\n    </Typography>\n  );\n}\n\nexport function SwapButton() {\n  const styles = useStyles();\n  const {\n    fromMint,\n    toMint,\n    fromAmount,\n    slippage,\n    isClosingNewAccounts,\n    isStrict,\n  } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const fromMintInfo = useMint(fromMint);\n  const toMintInfo = useMint(toMint);\n  const openOrders = useOpenOrders();\n  const route = useRouteVerbose(fromMint, toMint);\n  const fromMarket = useMarket(\n    route && route.markets ? route.markets[0] : undefined\n  );\n  const toMarket = useMarket(\n    route && route.markets ? route.markets[1] : undefined\n  );\n  const canSwap = useCanSwap();\n  const referral = useReferral(fromMarket);\n  const fair = useSwapFair();\n  let fromWallet = useOwnedTokenAccount(fromMint);\n  let toWallet = useOwnedTokenAccount(toMint);\n  const quoteMint = fromMarket && fromMarket.quoteMintAddress;\n  const quoteMintInfo = useMint(quoteMint);\n  const quoteWallet = useOwnedTokenAccount(quoteMint);\n\n  // Click handler.\n  const sendSwapTransaction = async () => {\n    if (!fromMintInfo || !toMintInfo) {\n      throw new Error(\"Unable to calculate mint decimals\");\n    }\n    if (!fair) {\n      throw new Error(\"Invalid fair\");\n    }\n    if (!quoteMint || !quoteMintInfo) {\n      throw new Error(\"Quote mint not found\");\n    }\n\n    const amount = new BN(fromAmount * 10 ** fromMintInfo.decimals);\n    const isSol = fromMint.equals(SOL_MINT) || toMint.equals(SOL_MINT);\n    const wrappedSolAccount = isSol ? Keypair.generate() : undefined;\n\n    // Build the swap.\n    let txs = await (async () => {\n      if (!fromMarket) {\n        throw new Error(\"Market undefined\");\n      }\n\n      const minExchangeRate = {\n        rate: new BN((10 ** toMintInfo.decimals * FEE_MULTIPLIER) / fair)\n          .muln(100 - slippage)\n          .divn(100),\n        fromDecimals: fromMintInfo.decimals,\n        quoteDecimals: quoteMintInfo.decimals,\n        strict: isStrict,\n      };\n      const fromOpenOrders = fromMarket\n        ? openOrders.get(fromMarket?.address.toString())\n        : undefined;\n      const toOpenOrders = toMarket\n        ? openOrders.get(toMarket?.address.toString())\n        : undefined;\n      const fromWalletAddr = fromMint.equals(SOL_MINT)\n        ? wrappedSolAccount!.publicKey\n        : fromWallet\n        ? fromWallet.publicKey\n        : undefined;\n      const toWalletAddr = toMint.equals(SOL_MINT)\n        ? wrappedSolAccount!.publicKey\n        : toWallet\n        ? toWallet.publicKey\n        : undefined;\n\n      return await swapClient.swapTxs({\n        fromMint,\n        toMint,\n        quoteMint,\n        amount,\n        minExchangeRate,\n        referral,\n        fromMarket,\n        toMarket,\n        // Automatically created if undefined.\n        fromOpenOrders: fromOpenOrders ? fromOpenOrders[0].address : undefined,\n        toOpenOrders: toOpenOrders ? toOpenOrders[0].address : undefined,\n        fromWallet: fromWalletAddr,\n        toWallet: toWalletAddr,\n        quoteWallet: quoteWallet ? quoteWallet.publicKey : undefined,\n        // Auto close newly created open orders accounts.\n        close: isClosingNewAccounts,\n      });\n    })();\n\n    // If swapping SOL, then insert a wrap/unwrap instruction.\n    if (isSol) {\n      if (txs.length > 1) {\n        throw new Error(\"SOL must be swapped in a single transaction\");\n      }\n      const { tx: wrapTx, signers: wrapSigners } = await wrapSol(\n        swapClient.program.provider,\n        wrappedSolAccount as Keypair,\n        fromMint,\n        amount\n      );\n      const { tx: unwrapTx, signers: unwrapSigners } = unwrapSol(\n        swapClient.program.provider,\n        wrappedSolAccount as Keypair\n      );\n      const tx = new Transaction();\n      tx.add(wrapTx);\n      tx.add(txs[0].tx);\n      tx.add(unwrapTx);\n      txs[0].tx = tx;\n      txs[0].signers.push(...wrapSigners);\n      txs[0].signers.push(...unwrapSigners);\n    }\n\n    await swapClient.program.provider.sendAll(txs);\n  };\n  return (\n    <Button\n      variant=\"contained\"\n      className={styles.swapButton}\n      onClick={sendSwapTransaction}\n      disabled={!canSwap}\n    >\n      Swap\n    </Button>\n  );\n}\n\nasync function wrapSol(\n  provider: Provider,\n  wrappedSolAccount: Keypair,\n  fromMint: PublicKey,\n  amount: BN\n): Promise<{ tx: Transaction; signers: Array<Signer | undefined> }> {\n  const tx = new Transaction();\n  const signers = [wrappedSolAccount];\n  // Create new, rent exempt account.\n  tx.add(\n    SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey: wrappedSolAccount.publicKey,\n      lamports: await Token.getMinBalanceRentForExemptAccount(\n        provider.connection\n      ),\n      space: 165,\n      programId: TOKEN_PROGRAM_ID,\n    })\n  );\n  // Transfer lamports. These will be converted to an SPL balance by the\n  // token program.\n  if (fromMint.equals(SOL_MINT)) {\n    tx.add(\n      SystemProgram.transfer({\n        fromPubkey: provider.wallet.publicKey,\n        toPubkey: wrappedSolAccount.publicKey,\n        lamports: amount.toNumber(),\n      })\n    );\n  }\n  // Initialize the account.\n  tx.add(\n    Token.createInitAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      WRAPPED_SOL_MINT,\n      wrappedSolAccount.publicKey,\n      provider.wallet.publicKey\n    )\n  );\n  return { tx, signers };\n}\n\nfunction unwrapSol(\n  provider: Provider,\n  wrappedSolAccount: Keypair\n): { tx: Transaction; signers: Array<Signer | undefined> } {\n  const tx = new Transaction();\n  tx.add(\n    Token.createCloseAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      wrappedSolAccount.publicKey,\n      provider.wallet.publicKey,\n      provider.wallet.publicKey,\n      []\n    )\n  );\n  return { tx, signers: [] };\n}\n","import { ReactElement } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenListContainer } from \"@solana/spl-token-registry\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  createTheme,\n  ThemeOptions,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport {\n  SwapContextProvider,\n  useSwapContext,\n  useSwapFair,\n} from \"./context/Swap\";\nimport {\n  DexContextProvider,\n  useBbo,\n  useFairRoute,\n  useMarketName,\n} from \"./context/Dex\";\nimport { TokenListContextProvider, useTokenMap } from \"./context/TokenList\";\nimport { TokenContextProvider, useMint } from \"./context/Token\";\nimport SwapCard, {\n  ArrowButton,\n  SwapButton,\n  SwapHeader,\n  SwapTokenForm,\n} from \"./components/Swap\";\nimport TokenDialog from \"./components/TokenDialog\";\n\n/**\n * A`Swap` component that can be embedded into applications. To use,\n * one can, minimally, provide a provider and token list to the component.\n * For example,\n *\n * ```javascript\n * <Swap provider={provider} tokenList={tokenList} />\n * ```\n *\n * All of the complexity of communicating with the Serum DEX and managing\n * its data is handled internally by the component.\n *\n * For information on other properties like earning referrals, see the\n * [[SwapProps]] documentation.\n */\nexport default function Swap(props: SwapProps): ReactElement {\n  const {\n    containerStyle,\n    contentStyle,\n    swapTokenContainerStyle,\n    materialTheme,\n    provider,\n    tokenList,\n    fromMint,\n    toMint,\n    fromAmount,\n    toAmount,\n    referral,\n  } = props;\n\n  // @ts-ignore\n  const swapClient = new SwapClient(provider, tokenList);\n  const theme = createTheme(\n    materialTheme || {\n      palette: {\n        type:'dark',\n        primary: {\n          main: \"#ebae37\",\n        },\n        secondary: {\n          main: \"#f48fb1\",\n        },\n        background: {\n          default: '#ebae37',\n          paper: '#424242',\n        },\n        info: {\n          main: '#ebae37',\n        },  \n        \n      },\n    }\n  );\n  return (\n    <ThemeProvider theme={theme}>\n      <TokenListContextProvider tokenList={tokenList} provider={provider}>\n        <TokenContextProvider provider={provider}>\n          <DexContextProvider swapClient={swapClient}>\n            <SwapContextProvider\n              fromMint={fromMint}\n              toMint={toMint}\n              fromAmount={fromAmount}\n              toAmount={toAmount}\n              referral={referral}\n            >\n              <SwapCard\n                containerStyle={containerStyle}\n                contentStyle={contentStyle}\n                swapTokenContainerStyle={swapTokenContainerStyle}\n              />\n            </SwapContextProvider>\n          </DexContextProvider>\n        </TokenContextProvider>\n      </TokenListContextProvider>\n    </ThemeProvider>\n  );\n}\n\n/**\n * Properties for the `Swap` Component.\n */\nexport type SwapProps = {\n  /**\n   * Wallet and network provider. Apps can use a `Provider` subclass to hook\n   * into all transactions intitiated by the component.\n   */\n  provider: Provider;\n\n  /**\n   * Token list providing information for tokens used.\n   */\n  tokenList: TokenListContainer;\n\n  /**\n   * Wallet address to which referral fees are sent (i.e. a SOL address).\n   * To receive referral fees, the wallet must *own* associated token\n   * accounts for the token in which the referral is paid  (usually USDC\n   * or USDT).\n   */\n  referral?: PublicKey;\n\n  /**\n   * The default `fromMint` to use when the component first renders.\n   */\n  fromMint?: PublicKey;\n\n  /**\n   * The default `toMint` to use when the component first renders.\n   */\n  toMint?: PublicKey;\n\n  /**\n   * The initial amount for the `fromMint` to use when the component first\n   * renders.\n   */\n  fromAmount?: number;\n\n  /**\n   * The initial amount for the `toMint` to use when the component first\n   * renders.\n   */\n  toAmount?: number;\n\n  /**\n   * Provide custom material-ui theme.\n   */\n  materialTheme?: ThemeOptions;\n\n  /**\n   * Styling properties for the main container.\n   */\n  containerStyle?: any;\n\n  /**\n   * Styling properties for the content container.\n   */\n  contentStyle?: any;\n\n  /**\n   * Styling properties for the from and to token containers.\n   */\n  swapTokenContainerStyle?: any;\n};\n\nexport {\n  // Components.\n  Swap,\n  SwapCard,\n  SwapHeader,\n  SwapTokenForm,\n  ArrowButton,\n  SwapButton,\n  TokenDialog,\n  // Providers and context.\n  // Swap.\n  SwapContextProvider,\n  useSwapContext,\n  useSwapFair,\n  // TokenList.\n  TokenListContextProvider,\n  useTokenMap,\n  // Token.\n  TokenContextProvider,\n  useMint,\n  // Dex.\n  DexContextProvider,\n  useFairRoute,\n  useMarketName,\n  useBbo,\n};\n","import \"@fontsource/roboto\";\nimport { useState, useEffect, useMemo } from \"react\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport { Provider } from \"@project-serum/anchor\";\n// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n  Signer,\n  ConfirmOptions,\n  Connection,\n  Transaction,\n  TransactionSignature,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport {\n  TokenListContainer,\n  TokenListProvider,\n} from \"@solana/spl-token-registry\";\nimport Swap from \"@project-serum/swap-ui\";\nimport \"./App.css\";\n\nimport { ConnectionProvider, WalletProvider, useWallet, useConnection } from '@solana/wallet-adapter-react';\nimport {\n  getPhantomWallet,\n  getSolletWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  WalletDialogProvider as MaterialUIWalletDialogProvider,\n  WalletMultiButton as MaterialUIWalletMultiButton,\n} from '@solana/wallet-adapter-material-ui';\n\n// App illustrating the use of the Swap component.\n//\n// One needs to just provide an Anchor `Provider` and a `TokenListContainer`\n// to the `Swap` component, and then everything else is taken care of.\nfunction App() {\n\n  const network = \"https://solana-api.projectserum.com\";\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolletWallet({ network: \"htpps://api.devnet.solana.com\" as WalletAdapterNetwork }),\n    ],\n    []\n  );\n\n  return (\n    <ConnectionProvider endpoint={network}>\n      <WalletProvider wallets={wallets} >\n        <MaterialUIWalletDialogProvider style={{backgroundColor: 'white', color: 'red'}}>\n          <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n            <AppInner />\n          </SnackbarProvider>\n        </MaterialUIWalletDialogProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: \"100vh\",\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n  },\n}));\n\nfunction AppInner() {\n  const styles = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [isConnected, setIsConnected] = useState(false);\n  const [tokenList, setTokenList] = useState<TokenListContainer | null>(null);\n  \n  \n  let commonBases: PublicKey[] = [\n    new PublicKey(\"2vRgBSJEVPXxayrhXoazQyCKSGFYQG3ZdfT2Gv5gZykL\"),\n    new PublicKey(\"Aw8qLRHGhMcKq7rxs5XBNCd9oe3BvoAhpNMVz7AdGmty\"),\n    new PublicKey(\"A9UhP1xfQHWUhSd54NgKPub2XB3ZuQMdPEvf9aMTHxGT\"),\n    new PublicKey(\"GLmaRDRmYd4u3YLfnj9eq1mrwxa1YfSweZYYZXZLTRdK\"),\n  ];\n\n\n  const opts: ConfirmOptions = {\n    preflightCommitment: \"recent\"\n  }\n  const newWallet = useWallet();\n  const { connection: newConnection } = useConnection();\n  const newProvider = new Provider(newConnection, newWallet as AnchorWallet, opts);\n\n  const [provider, wallet] = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const network = \"https://solana-api.projectserum.com\";\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new NotifyingProvider(\n      connection,\n      wallet,\n      opts,\n      (tx, err) => {\n        if (err) {\n          enqueueSnackbar(`Error: ${err.toString()}`, {\n            variant: \"error\",\n          });\n        } else {\n          enqueueSnackbar(\"Transaction sent\", {\n            variant: \"success\",\n            action: (\n              <Button\n                color=\"inherit\"\n                component=\"a\"\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={`https://explorer.solana.com/tx/${tx}`}\n              >\n                View on Solana Explorer\n              </Button>\n            ),\n          });\n        }\n      }\n    );\n    return [provider, wallet];\n  }, [enqueueSnackbar]);\n\n  useEffect(() => {\n    new TokenListProvider().resolve().then(setTokenList);\n  }, [setTokenList]);\n\n  // Connect to the wallet.\n  useEffect(() => {\n    wallet.on(\"connect\", () => {\n      enqueueSnackbar(\"Wallet connected\", { variant: \"success\" });\n      setIsConnected(true);\n    });\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Wallet disconnected\", { variant: \"info\" });\n      setIsConnected(false);\n    });\n  }, [wallet, enqueueSnackbar]);\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      className={styles.root}\n    >\n      <MaterialUIWalletMultiButton  style={{ position: \"fixed\", right: 24, top: 24 }}/>\n\n  \n {tokenList && <Swap provider={newProvider} tokenList={tokenList} />}\n    </Grid>\n  );\n}\n\n// Cast wallet to AnchorWallet in order to be compatible with Anchor's Provider class\ninterface AnchorWallet {\n  signTransaction(tx: Transaction): Promise<Transaction>;\n  signAllTransactions(txs: Transaction[]): Promise<Transaction[]>;\n  publicKey: PublicKey;\n}\n\n// Custom provider to display notifications whenever a transaction is sent.\n//\n// Note that this is an Anchor wallet/network provider--not a React provider,\n// so all transactions will be flowing through here, which allows us to\n// hook in to display all transactions sent from the `Swap` component\n// as notifications in the parent app.\nclass NotifyingProvider extends Provider {\n  // Function to call whenever the provider sends a transaction;\n  private onTransaction: (\n    tx: TransactionSignature | undefined,\n    err?: Error\n  ) => void;\n\n  constructor(\n    connection: Connection,\n    wallet: Wallet,\n    opts: ConfirmOptions,\n    onTransaction: (tx: TransactionSignature | undefined, err?: Error) => void\n  ) {\n    const newWallet = wallet as AnchorWallet;\n    super(connection, newWallet, opts);\n    this.onTransaction = onTransaction;\n  }\n\n  async send(\n    tx: Transaction,\n    signers?: Array<Signer | undefined>,\n    opts?: ConfirmOptions\n  ): Promise<TransactionSignature> {\n    try {\n      const txSig = await super.send(tx, signers, opts);\n      this.onTransaction(txSig);\n      return txSig;\n    } catch (err) {\n      if (err instanceof Error || err === undefined) {\n        this.onTransaction(undefined, err);\n      }\n      return \"\";\n    }\n  }\n\n  async sendAll(\n    txs: Array<{ tx: Transaction; signers: Array<Signer | undefined> }>,\n    opts?: ConfirmOptions\n  ): Promise<Array<TransactionSignature>> {\n    try {\n      const txSigs = await super.sendAll(txs, opts);\n      txSigs.forEach((sig) => {\n        this.onTransaction(sig);\n      });\n      return txSigs;\n    } catch (err) {\n      if (err instanceof Error || err === undefined) {\n        this.onTransaction(undefined, err);\n      }\n      return [];\n    }\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}