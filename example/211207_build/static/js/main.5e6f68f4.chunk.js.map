{"version":3,"sources":["../../../../src/lib/tokenlist.ts","../../src/utils/pubkeys.ts","../../src/context/TokenList.tsx","../../src/context/Sollet.tsx","../../src/utils/tokens.ts","../../src/context/Token.tsx","../../src/context/Dex.tsx","../../src/context/Swap.tsx","../../src/components/TokenDialog.tsx","../../src/components/OpenOrdersDialog.tsx","../../src/components/Settings.tsx","../../src/components/Info.tsx","../../src/components/Swap.tsx","../../src/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEX_PID","PublicKey","SRM_MINT","USDC_MINT","USDT_MINT","SOL_MINT","WRAPPED_SOL_MINT","WORM_MARKET_BASE","WORM_USDC_MINT","WORM_USDC_MARKET","WORM_USDT_MINT","WORM_USDT_MARKET","_TokenListContext","React","createContext","SPL_REGISTRY_SOLLET_TAG","SPL_REGISTRY_WORM_TAG","SOL_TOKEN_INFO","chainId","address","toString","name","decimals","symbol","logoURI","tags","extensions","website","serumV3Usdc","serumV3Usdt","coingeckoId","waterfallbot","TokenListContextProvider","props","tokenList","useMemo","list","filterByClusterSlug","getList","push","tokenMap","Map","forEach","t","set","swappableTokens","tokens","filter","sort","a","b","includes","map","swappableTokensSollet","solletMap","swappableTokensWormhole","wormholeMap","commonTokenBases","commonBases","add","get","Provider","value","children","useTokenListContext","ctx","useContext","Error","useTokenMap","fetchSolletInfo","mint","undefined","info","_SOLLET_INFO_CACHE","swapApiRequest","infoRaw","splMint","requestWormholeSwapMarketIfNeeded","connection","solletMint","wormholeMint","swapMarket","solletInfo","cached","_SWAP_MARKET_EXISTS_CACHE","getAccountInfo","ticker","catch","console","error","method","path","body","params","headers","cache","JSON","stringify","fetch","resp","handleSwapApiResponse","json","success","SwapApiError","status","result","msg","publicKey","filters","getOwnedAccountsFilters","getProgramAccounts","TOKEN_PROGRAM_ID","commitment","accs","pubkey","account","data","executable","owner","lamports","accountInfo","parseTokenAccountData","Promise","all","ta","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","ata","equals","ACCOUNT_LAYOUT","BufferLayout","decode","amount","BN","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span","_TokenContext","TokenContextProvider","provider","useState","setRefresh","useEffect","wallet","_OWNED_TOKEN_ACCOUNTS_CACHE","length","r","getOwnedAssociatedTokenAccounts","then","acc","useTokenContext","useOwnedTokenAccount","tokenAccounts","tokenAccount","isSol","listener","onAccountChange","token","index","indexOf","assert","log","removeAccountChangeListener","useMint","asyncMintInfo","useAsync","_MINT_CACHE","mintClient","Account","mintInfo","getMintInfo","FEE_MULTIPLIER","_DexContext","DexContextProvider","ooAccounts","setOoAccounts","swapClient","closeOpenOrders","openOrder","newOoAccounts","openOrders","market","oo","delete","program","OpenOrders","findForOwner","markets","Set","size","anchor","rpc","getMultipleAccounts","Array","from","values","m","multipleMarkets","marketClients","programAccount","Market","getLayout","opts","mintPubkeys","baseMintAddress","quoteMintAddress","flat","pk","mints","mintInfos","MintLayout","resolve","baseMintInfo","quoteMintInfo","_baseSplTokenDecimals","_quoteSplTokenDecimals","_MARKET_CACHE","useDexContext","useOpenOrders","useMarket","asyncMarket","marketClient","load","useBbo","orderbook","orderBookCache","setOrderBookCache","asyncOrderbook","loadBids","loadAsks","bids","asks","bidsAddress","OrderbookSide","oldBestBid","items","next","newBestBid","price","oldAsks","newtemp","asksAddress","oldBestOffer","newBestOffer","oldBids","useOrderbook","bestBid","bestOffer","mid","useRoute","fromMint","toMint","route","useRouteVerbose","asyncRoute","wormholeSwapMarket","wormholeMarket","kind","WORMHOLE_NATIVE_MAP","wormKey","first","second","conn","wormholeNativeMarket","wormholeSolletMarket","fromWormhole","isFromWormhole","toWormhole","isToWormhole","fromSollet","isFromSollet","toSollet","isToSollet","base","quote","wormholeInfo","erc20Contract","deriveWormholeMarket","baseMint","quoteMint","version","padToTwo","n","slice","seed","createWithSeed","_SwapContext","SwapContextProvider","setFromMint","setToMint","fromAmount","_setFromAmount","toAmount","_setToAmount","isClosingNewAccounts","setIsClosingNewAccounts","isStrict","setIsStrict","slippage","setSlippage","fairOverride","setFairOverride","fair","_useSwapFair","referral","setFromAmount","setToAmount","swapToFromMints","oldFrom","oldTo","useSwapContext","useSwapFair","fairRoute","fromBbo","fromMarket","toBbo","useFairRoute","useStyles","makeStyles","theme","dialogContent","padding","textField","marginBottom","tab","minWidth","tabSelected","color","palette","primary","contrastText","fontWeight","backgroundColor","main","borderRadius","tabIndicator","opacity","TokenDialog","open","onClose","setMint","tabSelection","setTabSelection","tokenFilter","setTokenFilter","toLowerCase","styles","useSwappableTokens","displayTabs","useMediaQuery","selectedTokens","startsWith","Dialog","scroll","PaperProps","style","width","DialogTitle","Typography","variant","paddingBottom","TextField","className","placeholder","fullWidth","onChange","e","target","DialogContent","dividers","List","disablePadding","CommonBases","onClick","tokenInfo","TokenListItem","DialogActions","Tabs","v","classes","indicator","Tab","selected","label","ListItem","button","TokenIcon","TokenName","marginLeft","fontSize","Chip","avatar","Avatar","alt","src","margin","table","closeAccount","OpenOrdersDialog","maxWidth","display","justifyContent","IconButton","Close","paddingTop","OpenOrdersAccounts","openOrdersEntries","entries","TableContainer","component","Paper","elevation","Table","TableHead","TableRow","TableCell","align","TableBody","oos","OpenOrdersRow","ooAccount","setOoAccount","baseWallet","quoteWallet","baseTicker","quoteTicker","marketName","settleDisabled","baseTokenFree","toNumber","quoteTokenFree","closeDisabled","baseTokenTotal","quoteTokenTotal","settleFunds","makeSettleFundsTransaction","transaction","signers","send","_closeOpenOrders","accounts","authority","destination","dexProgram","scope","Link","href","rel","Select","MenuItem","toDisplay","sub","Button","disabled","toFixed","settingsButton","closeAccountSwitchLabel","text","secondary","fairAutoSelected","fairAuto","type","light","boxShadow","SettingsButton","popupState","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","SettingsDetails","showSettingsDialog","setShowSettingsDialog","marginTop","parseFloat","flexDirection","InputProps","endAdornment","InputAdornment","position","marginRight","flex","CloseNewAccountsSwitch","FormGroup","row","FormControlLabel","labelPlacement","control","Switch","checked","infoLabel","alignItems","infoButton","InfoLabel","fromMintInfo","fromTokenInfo","toTokenInfo","InfoButton","Info","disableRestoreFocus","InfoDetails","addresses","MarketRoute","overflow","useMarketName","bbo","card","spacing","swapButton","swapToFromButton","cursor","amountInput","input","textAlign","swapTokenFormContainer","swapTokenSelectorContainer","balanceContainer","maxButton","tokenButton","SwapCard","containerStyle","contentStyle","swapTokenContainerStyle","Card","SwapHeader","SwapFromForm","ArrowButton","SwapToForm","SwapButton","useTheme","ImportExportRounded","htmlColor","SwapTokenForm","setAmount","showTokenDialog","setShowTokenDialog","mintAccount","balance","formattedAmount","toLocaleString","maximumFractionDigits","useGrouping","TokenButton","disableUnderline","root","ExpandMore","toMintInfo","toMarket","canSwap","fromWallet","useCanSwap","asyncReferral","useReferral","toWallet","sendSwapTransaction","wrappedSolAccount","Keypair","generate","minExchangeRate","rate","muln","divn","fromDecimals","quoteDecimals","strict","fromOpenOrders","toOpenOrders","fromWalletAddr","toWalletAddr","swapTxs","close","txs","wrapSol","wrapTx","tx","wrapSigners","unwrapSol","unwrapTx","unwrapSigners","Transaction","sendAll","SystemProgram","getMinBalanceRentForExemptAccount","fromPubkey","newAccountPubkey","space","programId","createAccount","transfer","toPubkey","createInitAccountInstruction","createCloseAccountInstruction","Swap","materialTheme","SwapClient","createTheme","background","default","paper","ThemeProvider","minHeight","paddingLeft","paddingRight","AppInner","enqueueSnackbar","useSnackbar","setIsConnected","setTokenList","newWallet","useWallet","newConnection","useConnection","preflightCommitment","network","Wallet","Connection","NotifyingProvider","err","action","TokenListProvider","on","Grid","container","right","top","onTransaction","txSig","this","txSigs","sig","App","wallets","getPhantomWallet","getSolletWallet","endpoint","maxSnack","autoHideDuration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e6f68f4.chunk.js","sourcesContent":["import { fetch } from 'cross-fetch';\nimport tokenlist from './../tokens/solana.tokenlist.json';\nexport var ENV;\n(function (ENV) {\n    ENV[ENV[\"MainnetBeta\"] = 101] = \"MainnetBeta\";\n    ENV[ENV[\"Testnet\"] = 102] = \"Testnet\";\n    ENV[ENV[\"Devnet\"] = 103] = \"Devnet\";\n})(ENV || (ENV = {}));\nexport const CLUSTER_SLUGS = {\n    'mainnet-beta': ENV.MainnetBeta,\n    testnet: ENV.Testnet,\n    devnet: ENV.Devnet,\n};\nexport class GitHubTokenListResolutionStrategy {\n    constructor() {\n        this.repositories = [\n            '../tokens/solana.tokenlist.json',\n        ];\n        this.resolve = () => {\n            return queryJsonFiles(this.repositories);\n        };\n    }\n}\nexport class CDNTokenListResolutionStrategy {\n    constructor() {\n        this.repositories = [\n            'https://cdn.jsdelivr.net/gh/solana-labs/token-list@main/src/tokens/solana.tokenlist.json',\n        ];\n        this.resolve = () => {\n            return queryJsonFiles(this.repositories);\n        };\n    }\n}\nconst queryJsonFiles = async (files) => {\n    const responses = (await Promise.all(files.map(async (repo) => {\n        try {\n            const response = await fetch(repo);\n            const json = (await response.json());\n            return json;\n        }\n        catch {\n            console.info(`@solana/token-registry: falling back to static repository.`);\n            return tokenlist;\n        }\n    })));\n    return responses\n        .map((tokenlist) => tokenlist.tokens)\n        .reduce((acc, arr) => acc.concat(arr), []);\n};\nexport var Strategy;\n(function (Strategy) {\n    Strategy[\"GitHub\"] = \"GitHub\";\n    Strategy[\"Static\"] = \"Static\";\n    Strategy[\"Solana\"] = \"Solana\";\n    Strategy[\"CDN\"] = \"CDN\";\n})(Strategy || (Strategy = {}));\nexport class SolanaTokenListResolutionStrategy {\n    constructor() {\n        this.resolve = () => {\n            throw new Error(`Not Implemented Yet.`);\n        };\n    }\n}\nexport class StaticTokenListResolutionStrategy {\n    constructor() {\n        this.resolve = () => {\n            return tokenlist.tokens;\n        };\n    }\n}\nexport class TokenListProvider {\n    constructor() {\n        this.resolve = async (strategy = Strategy.CDN) => {\n            return new TokenListContainer(await TokenListProvider.strategies[strategy].resolve());\n        };\n    }\n}\nTokenListProvider.strategies = {\n    [Strategy.GitHub]: new GitHubTokenListResolutionStrategy(),\n    [Strategy.Static]: new StaticTokenListResolutionStrategy(),\n    [Strategy.Solana]: new SolanaTokenListResolutionStrategy(),\n    [Strategy.CDN]: new CDNTokenListResolutionStrategy(),\n};\nexport class TokenListContainer {\n    constructor(tokenList) {\n        this.tokenList = tokenList;\n        this.filterByTag = (tag) => {\n            return new TokenListContainer(this.tokenList.filter((item) => (item.tags || []).includes(tag)));\n        };\n        this.filterByChainId = (chainId) => {\n            return new TokenListContainer(this.tokenList.filter((item) => item.chainId === chainId));\n        };\n        this.excludeByChainId = (chainId) => {\n            return new TokenListContainer(this.tokenList.filter((item) => item.chainId !== chainId));\n        };\n        this.excludeByTag = (tag) => {\n            return new TokenListContainer(this.tokenList.filter((item) => !(item.tags || []).includes(tag)));\n        };\n        this.filterByClusterSlug = (slug) => {\n            if (slug in CLUSTER_SLUGS) {\n                return this.filterByChainId(CLUSTER_SLUGS[slug]);\n            }\n            throw new Error(`Unknown slug: ${slug}, please use one of ${Object.keys(CLUSTER_SLUGS)}`);\n        };\n        this.getList = () => {\n            return this.tokenList;\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5saXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi90b2tlbmxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVwQyxPQUFPLFNBQVMsTUFBTSxtQ0FBbUMsQ0FBQztBQUUxRCxNQUFNLENBQU4sSUFBWSxHQUlYO0FBSkQsV0FBWSxHQUFHO0lBQ2IsNkNBQWlCLENBQUE7SUFDakIscUNBQWEsQ0FBQTtJQUNiLG1DQUFZLENBQUE7QUFDZCxDQUFDLEVBSlcsR0FBRyxLQUFILEdBQUcsUUFJZDtBQStDRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQTBCO0lBQ2xELGNBQWMsRUFBRSxHQUFHLENBQUMsV0FBVztJQUMvQixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87SUFDcEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO0NBQ25CLENBQUM7QUFFRixNQUFNLE9BQU8saUNBQWlDO0lBQTlDO1FBQ0UsaUJBQVksR0FBRztZQUNiLGdHQUFnRztTQUNqRyxDQUFDO1FBRUYsWUFBTyxHQUFHLEdBQUcsRUFBRTtZQUNiLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUM7SUFDSixDQUFDO0NBQUE7QUFFRCxNQUFNLE9BQU8sOEJBQThCO0lBQTNDO1FBQ0UsaUJBQVksR0FBRztZQUNiLDBGQUEwRjtTQUMzRixDQUFDO1FBRUYsWUFBTyxHQUFHLEdBQUcsRUFBRTtZQUNiLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUM7SUFDSixDQUFDO0NBQUE7QUFFRCxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQUUsS0FBZSxFQUFFLEVBQUU7SUFDL0MsTUFBTSxTQUFTLEdBQWdCLENBQUMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUMvQyxLQUFLLENBQUMsR0FB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","import { PublicKey } from \"@solana/web3.js\";\n\nexport const DEX_PID = new PublicKey(\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\"\n);\n\nexport const SRM_MINT = new PublicKey(\n  \"2vRgBSJEVPXxayrhXoazQyCKSGFYQG3ZdfT2Gv5gZykL\"\n);\n\nexport const USDC_MINT = new PublicKey(\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n);\n\nexport const USDT_MINT = new PublicKey(\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\n);\n\n// Arbitrary mint to represent SOL (not wrapped SOL).\nexport const SOL_MINT = new PublicKey(\n  \"Ejmc1UB4EsES5oAaRN63SpoxMJidt3ZGBrqrZk49vjTZ\"\n);\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const WORM_MARKET_BASE = new PublicKey(\n  \"6a9wpsZpZGxGhFVSQBpcTNjNjytdbSA1iUw1A5KNDxPw\"\n);\n\nexport const WORM_USDC_MINT = new PublicKey(\n  \"FVsXUnbhifqJ4LiXQEbpUtXVdB8T5ADLKqSs5t1oc54F\"\n);\n\nexport const WORM_USDC_MARKET = new PublicKey(\n  \"6nGMps9VfDjkKEwYjdSNqN1ToXkLae4VsN49fzBiDFBd\"\n);\n\nexport const WORM_USDT_MINT = new PublicKey(\n  \"9w97GdWUYYaamGwdKMKZgGzPduZJkiFizq4rz5CPXRv2\"\n);\n\nexport const WORM_USDT_MARKET = new PublicKey(\n  \"4v6e6vNXAaEunrvbqkYnKwbaWfck8a2KVR4uRAVXxVwC\"\n);\n","import React, { useContext, useMemo } from \"react\";\nimport { TokenInfo } from \"../spl-token-registry\";\nimport { SOL_MINT } from \"../utils/pubkeys\";\nimport { PublicKey } from \"@solana/web3.js\";\n\ntype TokenListContext = {\n  tokenMap: Map<string, TokenInfo>;\n  wormholeMap: Map<string, TokenInfo>;\n  solletMap: Map<string, TokenInfo>;\n  swappableTokens: TokenInfo[];\n  swappableTokensSollet: TokenInfo[];\n  swappableTokensWormhole: TokenInfo[];\n  commonTokenBases: TokenInfo[];\n};\nconst _TokenListContext = React.createContext<null | TokenListContext>(null);\n\n// Tag in the spl-token-registry for sollet wrapped tokens.\nexport const SPL_REGISTRY_SOLLET_TAG = \"wrapped-sollet\";\n\n// Tag in the spl-token-registry for wormhole wrapped tokens.\nexport const SPL_REGISTRY_WORM_TAG = \"wormhole\";\n\nconst SOL_TOKEN_INFO = {\n  chainId: 101,\n  address: SOL_MINT.toString(),\n  name: \"Native SOL\",\n  decimals: \"9\",\n  symbol: \"SOL\",\n  logoURI:\n    \"https://cdn.jsdelivr.net/gh/trustwallet/assets@master/blockchains/solana/info/logo.png\",\n  tags: [],\n  extensions: {\n    website: \"https://solana.com/\",\n    serumV3Usdc: \"9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT\",\n    serumV3Usdt: \"HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1\",\n    coingeckoId: \"solana\",\n    waterfallbot: \"https://t.me/SOLwaterfall\",\n  },\n};\n\nexport function TokenListContextProvider(props: any) {\n  const tokenList = useMemo(() => {\n    const list = props.tokenList.filterByClusterSlug(\"mainnet-beta\").getList();\n    // Manually add a fake SOL mint for the native token. The component is\n    // opinionated in that it distinguishes between wrapped SOL and SOL.\n    list.push(SOL_TOKEN_INFO);\n    return list;\n  }, [props.tokenList]);\n\n  // Token map for quick lookup.\n  const tokenMap = useMemo(() => {\n    const tokenMap = new Map();\n    tokenList.forEach((t: TokenInfo) => {\n      tokenMap.set(t.address, t);\n    });\n    return tokenMap;\n  }, [tokenList]);\n\n  // Tokens with USD(x) quoted markets.\n  const swappableTokens = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isUsdxQuoted =\n        t.extensions?.serumV3Usdt || t.extensions?.serumV3Usdc;\n      return isUsdxQuoted;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return tokens;\n  }, [tokenList, tokenMap]);\n\n  // Sollet wrapped tokens.\n  const [swappableTokensSollet, solletMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_SOLLET_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  // Wormhole wrapped tokens.\n  const [swappableTokensWormhole, wormholeMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_WORM_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  // Common token bases\n  const commonTokenBases = useMemo(() => {\n    const cb = props.commonBases?.map((add: PublicKey) => {\n      return tokenMap.get(add.toString());\n    });\n    return cb;\n  }, [tokenList]);\n  return (\n    <_TokenListContext.Provider\n      value={{\n        tokenMap,\n        wormholeMap,\n        solletMap,\n        swappableTokens,\n        swappableTokensWormhole,\n        swappableTokensSollet,\n        commonTokenBases,\n      }}\n    >\n      {props.children}\n    </_TokenListContext.Provider>\n  );\n}\n\nexport function useTokenListContext(): TokenListContext {\n  const ctx = useContext(_TokenListContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useTokenMap(): Map<string, TokenInfo> {\n  const { tokenMap } = useTokenListContext();\n  return tokenMap;\n}\n\nexport function useSwappableTokens() {\n  const {\n    swappableTokens,\n    swappableTokensWormhole,\n    swappableTokensSollet,\n    commonTokenBases,\n  } = useTokenListContext();\n  return {\n    swappableTokens,\n    swappableTokensWormhole,\n    swappableTokensSollet,\n    commonTokenBases,\n  };\n}\n","import { useAsync, UseAsyncReturn } from \"react-async-hook\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\n// Token info tracked by the sollet bridge.\ntype SolletInfo = {\n  blockchain: string;\n  erc20Contract: string;\n  name: string;\n  splMint: PublicKey;\n  ticker: string;\n};\n\nexport function useSolletInfo(mint: PublicKey): UseAsyncReturn<SolletInfo> {\n  return useAsync(async () => {\n    return fetchSolletInfo(mint);\n  }, [mint]);\n}\n\n// Fetches the token info from the sollet bridge.\nexport async function fetchSolletInfo(mint: PublicKey): Promise<SolletInfo> {\n  let info = _SOLLET_INFO_CACHE.get(mint.toString());\n  if (info !== undefined) {\n    return info;\n  }\n\n  const infoRaw = await swapApiRequest(\"GET\", `coins/sol/${mint.toString()}`);\n  info = { ...infoRaw, splMint: new PublicKey(infoRaw.splMint) };\n  _SOLLET_INFO_CACHE.set(mint.toString(), info!);\n\n  return info!;\n}\n\n// Requests the creation of a sollet wormhole swap market, if it doesn't\n// already exist. Note: this triggers a creation notification. Creation\n// doesn't happen immediately, but at some unspecified point in the future\n// since market makers need to setup on the swap market and provide liquidity.\n//\n// Returns true if the market exists already. False otherwise.\nexport async function requestWormholeSwapMarketIfNeeded(\n  connection: Connection,\n  solletMint: PublicKey,\n  wormholeMint: PublicKey,\n  swapMarket: PublicKey,\n  solletInfo: SolletInfo\n): Promise<boolean> {\n  const cached = _SWAP_MARKET_EXISTS_CACHE.get(swapMarket.toString());\n  if (cached !== undefined) {\n    return cached;\n  }\n  const acc = await connection.getAccountInfo(swapMarket);\n  if (acc === null) {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), false);\n    const resource = `wormhole/pool/${\n      solletInfo.ticker\n    }/${swapMarket.toString()}/${solletMint.toString()}/${wormholeMint.toString()}`;\n    swapApiRequest(\"POST\", resource).catch(console.error);\n    return false;\n  } else {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), true);\n    return true;\n  }\n}\n\nexport async function swapApiRequest(\n  method: string,\n  path: string,\n  body?: Object\n) {\n  let headers: any = {};\n  let params: any = { headers, method };\n  if (method === \"GET\") {\n    params.cache = \"no-cache\";\n  } else if (body) {\n    headers[\"Content-Type\"] = \"application/json\";\n    params.body = JSON.stringify(body);\n  }\n  let resp = await fetch(`https://swap.sollet.io/api/${path}`, params);\n  return await handleSwapApiResponse(resp);\n}\n\nasync function handleSwapApiResponse(resp: Response) {\n  let json = await resp.json();\n  if (!json.success) {\n    throw new SwapApiError(json.error, resp.status);\n  }\n  return json.result;\n}\n\nexport class SwapApiError extends Error {\n  readonly name: string;\n  readonly status: number;\n  constructor(msg: string, status: number) {\n    super(msg);\n    this.name = \"SwapApiError\";\n    this.status = status;\n  }\n}\n\nconst _SOLLET_INFO_CACHE = new Map<string, SolletInfo>();\nconst _SWAP_MARKET_EXISTS_CACHE = new Map<string, boolean>();\n","// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport {\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  AccountInfo as TokenAccount,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport async function getOwnedAssociatedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection.getProgramAccounts(TOKEN_PROGRAM_ID, {\n    commitment: connection.commitment,\n    filters,\n  });\n\n  const accs = resp\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data,\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n\n  return (\n    (\n      await Promise.all(\n        accs\n          // @ts-ignore\n          .map(async (ta) => {\n            const ata = await Token.getAssociatedTokenAddress(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              ta.account.mint,\n              publicKey\n            );\n            return [ta, ata];\n          })\n      )\n    )\n      // @ts-ignore\n      .filter(([ta, ata]) => ta.publicKey.equals(ata))\n      // @ts-ignore\n      .map(([ta]) => ta)\n  );\n}\n\nconst ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nexport function parseTokenAccountData(data: Buffer): TokenAccount {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  // @ts-ignore\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport * as assert from \"assert\";\nimport { useAsync } from \"react-async-hook\";\nimport { Provider, BN } from \"@project-serum/anchor\";\nimport { PublicKey, Account } from \"@solana/web3.js\";\nimport {\n  MintInfo,\n  AccountInfo as TokenAccount,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  getOwnedAssociatedTokenAccounts,\n  parseTokenAccountData,\n} from \"../utils/tokens\";\nimport { SOL_MINT } from \"../utils/pubkeys\";\n\nexport type TokenContext = {\n  provider: Provider;\n};\nconst _TokenContext = React.createContext<TokenContext | null>(null);\n\nexport function TokenContextProvider(props: any) {\n  const provider = props.provider;\n  const [, setRefresh] = useState(0);\n\n  // Fetch all the owned token accounts for the wallet.\n  useEffect(() => {\n    if (!provider.wallet.publicKey) {\n      _OWNED_TOKEN_ACCOUNTS_CACHE.length = 0;\n      setRefresh((r) => r + 1);\n      return;\n    }\n    // Fetch SPL tokens.\n    getOwnedAssociatedTokenAccounts(\n      provider.connection,\n      provider.wallet.publicKey\n    ).then((accs) => {\n      if (accs) {\n        // @ts-ignore\n        _OWNED_TOKEN_ACCOUNTS_CACHE.push(...accs);\n        setRefresh((r) => r + 1);\n      }\n    });\n    // Fetch SOL balance.\n    provider.connection\n      .getAccountInfo(provider.wallet.publicKey)\n      .then((acc: { lamports: number }) => {\n        if (acc) {\n          _OWNED_TOKEN_ACCOUNTS_CACHE.push({\n            publicKey: provider.wallet.publicKey,\n            // @ts-ignore\n            account: {\n              amount: new BN(acc.lamports),\n              mint: SOL_MINT,\n            },\n          });\n          setRefresh((r) => r + 1);\n        }\n      });\n  }, [provider.wallet.publicKey, provider.connection]);\n\n  return (\n    <_TokenContext.Provider\n      value={{\n        provider,\n      }}\n    >\n      {props.children}\n    </_TokenContext.Provider>\n  );\n}\n\nfunction useTokenContext() {\n  const ctx = useContext(_TokenContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\n// Null => none exists.\n// Undefined => loading.\nexport function useOwnedTokenAccount(\n  mint?: PublicKey\n): { publicKey: PublicKey; account: TokenAccount } | null | undefined {\n  const { provider } = useTokenContext();\n  const [, setRefresh] = useState(0);\n  const tokenAccounts = _OWNED_TOKEN_ACCOUNTS_CACHE.filter(\n    (account) => mint && account.account.mint.equals(mint)\n  );\n\n  // Take the account with the most tokens in it.\n  tokenAccounts.sort((a, b) =>\n    a.account.amount > b.account.amount\n      ? -1\n      : a.account.amount < b.account.amount\n      ? 1\n      : 0\n  );\n\n  let tokenAccount = tokenAccounts[0];\n  const isSol = mint?.equals(SOL_MINT);\n\n  // Stream updates when the balance changes.\n  useEffect(() => {\n    let listener: number;\n    // SOL is special cased since it's not an SPL token.\n    if (tokenAccount && isSol) {\n      listener = provider.connection.onAccountChange(\n        provider.wallet.publicKey,\n        (info: { lamports: number }) => {\n          const token = {\n            amount: new BN(info.lamports),\n            mint: SOL_MINT,\n          } as TokenAccount;\n          if (token.amount !== tokenAccount.account.amount) {\n            const index = _OWNED_TOKEN_ACCOUNTS_CACHE.indexOf(tokenAccount);\n            assert.ok(index >= 0);\n            _OWNED_TOKEN_ACCOUNTS_CACHE[index].account = token;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    // SPL tokens.\n    else if (tokenAccount) {\n      listener = provider.connection.onAccountChange(\n        tokenAccount.publicKey,\n        (info) => {\n          if (info.data.length !== 0) {\n            try {\n              const token = parseTokenAccountData(info.data);\n              if (token.amount !== tokenAccount.account.amount) {\n                const index = _OWNED_TOKEN_ACCOUNTS_CACHE.indexOf(tokenAccount);\n                assert.ok(index >= 0);\n                _OWNED_TOKEN_ACCOUNTS_CACHE[index].account = token;\n                setRefresh((r) => r + 1);\n              }\n            } catch (error) {\n              console.log(\"Failed to decode token AccountInfo\");\n            }\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        provider.connection.removeAccountChangeListener(listener);\n      }\n    };\n  }, [provider.connection, tokenAccount]);\n\n  if (mint === undefined) {\n    return undefined;\n  }\n\n  if (!isSol && tokenAccounts.length === 0) {\n    return null;\n  }\n\n  return tokenAccount;\n}\n\nexport function useMint(mint?: PublicKey): MintInfo | undefined | null {\n  const { provider } = useTokenContext();\n  // Lazy load the mint account if needeed.\n  const asyncMintInfo = useAsync(async () => {\n    if (!mint) {\n      return undefined;\n    }\n    if (_MINT_CACHE.get(mint.toString())) {\n      return _MINT_CACHE.get(mint.toString());\n    }\n\n    const mintClient = new Token(\n      provider.connection,\n      mint,\n      TOKEN_PROGRAM_ID,\n      new Account()\n    );\n    const mintInfo = mintClient.getMintInfo();\n    _MINT_CACHE.set(mint.toString(), mintInfo);\n    return mintInfo;\n  }, [provider.connection, mint]);\n\n  if (asyncMintInfo.result) {\n    return asyncMintInfo.result;\n  }\n  return undefined;\n}\n\nexport function setMintCache(pk: PublicKey, account: MintInfo) {\n  _MINT_CACHE.set(pk.toString(), new Promise((resolve) => resolve(account)));\n}\n\n// Cache storing all token accounts for the connected wallet provider.\nconst _OWNED_TOKEN_ACCOUNTS_CACHE: Array<{\n  publicKey: PublicKey;\n  account: TokenAccount;\n}> = [];\n\n// Cache storing all previously fetched mint infos.\n// @ts-ignore\nconst _MINT_CACHE = new Map<string, Promise<MintInfo>>([\n  [SOL_MINT.toString(), { decimals: 9 }],\n]);\n","import React, { useContext, useState, useEffect } from \"react\";\nimport * as assert from \"assert\";\nimport { useAsync } from \"react-async-hook\";\nimport { TokenInfo } from \"../spl-token-registry\";\nimport { MintLayout } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  Market,\n  OpenOrders,\n  Orderbook as OrderbookSide,\n} from \"@project-serum/serum\";\nimport {\n  DEX_PID,\n  USDC_MINT,\n  USDT_MINT,\n  SOL_MINT,\n  WRAPPED_SOL_MINT,\n  WORM_USDC_MINT,\n  WORM_USDT_MINT,\n  WORM_USDC_MARKET,\n  WORM_USDT_MARKET,\n  WORM_MARKET_BASE,\n} from \"../utils/pubkeys\";\nimport { useTokenMap, useTokenListContext } from \"./TokenList\";\nimport { fetchSolletInfo, requestWormholeSwapMarketIfNeeded } from \"./Sollet\";\nimport { setMintCache } from \"./Token\";\n\nconst BASE_TAKER_FEE_BPS = 0.0022;\nexport const FEE_MULTIPLIER = 1 - BASE_TAKER_FEE_BPS;\n\ntype DexContext = {\n  // Maps market address to open orders accounts.\n  openOrders: Map<string, Array<OpenOrders>>;\n  closeOpenOrders: (openOrder: OpenOrders) => void;\n  swapClient: SwapClient;\n};\nconst _DexContext = React.createContext<DexContext | null>(null);\n\nexport function DexContextProvider(props: any) {\n  const [ooAccounts, setOoAccounts] = useState<Map<string, Array<OpenOrders>>>(\n    new Map()\n  );\n  const swapClient = props.swapClient;\n\n  // Removes the given open orders from the context.\n  const closeOpenOrders = async (openOrder: OpenOrders) => {\n    const newOoAccounts = new Map(ooAccounts);\n    const openOrders = newOoAccounts\n      .get(openOrder.market.toString())\n      ?.filter((oo: OpenOrders) => !oo.address.equals(openOrder.address));\n    if (openOrders && openOrders.length > 0) {\n      newOoAccounts.set(openOrder.market.toString(), openOrders);\n    } else {\n      newOoAccounts.delete(openOrder.market.toString());\n    }\n    setOoAccounts(newOoAccounts);\n  };\n\n  // Three operations:\n  //\n  // 1. Fetch all open orders accounts for the connected wallet.\n  // 2. Batch fetch all market accounts for those open orders.\n  // 3. Batch fetch all mints associated with the markets.\n  useEffect(() => {\n    if (!swapClient.program.provider.wallet.publicKey) {\n      setOoAccounts(new Map());\n      return;\n    }\n    OpenOrders.findForOwner(\n      swapClient.program.provider.connection,\n      swapClient.program.provider.wallet.publicKey,\n      DEX_PID\n    ).then(async (openOrders) => {\n      const newOoAccounts = new Map();\n      let markets = new Set<string>();\n      openOrders.forEach((oo) => {\n        markets.add(oo.market.toString());\n        if (newOoAccounts.get(oo.market.toString())) {\n          newOoAccounts.get(oo.market.toString()).push(oo);\n        } else {\n          newOoAccounts.set(oo.market.toString(), [oo]);\n        }\n      });\n      if (markets.size > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\n          \"Too many markets. Please file an issue to update this\"\n        );\n      }\n      const multipleMarkets = await anchor.utils.rpc.getMultipleAccounts(\n        swapClient.program.provider.connection,\n        Array.from(markets.values()).map((m) => new PublicKey(m))\n      );\n      const marketClients = multipleMarkets.map((programAccount) => {\n        return {\n          publicKey: programAccount?.publicKey,\n          account: new Market(\n            Market.getLayout(DEX_PID).decode(programAccount?.account.data),\n            -1, // Set below so that we can batch fetch mints.\n            -1, // Set below so that we can batch fetch mints.\n            swapClient.program.provider.opts,\n            DEX_PID\n          ),\n        };\n      });\n\n      setOoAccounts(newOoAccounts);\n\n      // Batch fetch all the mints, since we know we'll need them at some\n      // point.\n      const mintPubkeys = Array.from(\n        new Set<string>(\n          marketClients\n            .map((m) => [\n              m.account.baseMintAddress.toString(),\n              m.account.quoteMintAddress.toString(),\n            ])\n            .flat()\n        ).values()\n      ).map((pk) => new PublicKey(pk));\n\n      if (mintPubkeys.length > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\"Too many mints. Please file an issue to update this\");\n      }\n\n      const mints = await anchor.utils.rpc.getMultipleAccounts(\n        swapClient.program.provider.connection,\n        mintPubkeys\n      );\n      const mintInfos = mints.map((mint) => {\n        const mintInfo = MintLayout.decode(mint!.account.data);\n        setMintCache(mint!.publicKey, mintInfo);\n        return { publicKey: mint!.publicKey, mintInfo };\n      });\n\n      marketClients.forEach((m) => {\n        const baseMintInfo = mintInfos.filter((mint) =>\n          mint.publicKey.equals(m.account.baseMintAddress)\n        )[0];\n        const quoteMintInfo = mintInfos.filter((mint) =>\n          mint.publicKey.equals(m.account.quoteMintAddress)\n        )[0];\n        assert.ok(baseMintInfo && quoteMintInfo);\n        // @ts-ignore\n        m.account._baseSplTokenDecimals = baseMintInfo.mintInfo.decimals;\n        // @ts-ignore\n        m.account._quoteSplTokenDecimals = quoteMintInfo.mintInfo.decimals;\n        _MARKET_CACHE.set(\n          m.publicKey!.toString(),\n          new Promise<Market>((resolve) => resolve(m.account))\n        );\n      });\n    });\n  }, [\n    swapClient.program.provider.connection,\n    swapClient.program.provider.wallet.publicKey,\n    swapClient.program.provider.opts,\n  ]);\n  return (\n    <_DexContext.Provider\n      value={{\n        openOrders: ooAccounts,\n        closeOpenOrders,\n        swapClient,\n      }}\n    >\n      {props.children}\n    </_DexContext.Provider>\n  );\n}\n\nexport function useDexContext(): DexContext {\n  const ctx = useContext(_DexContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useOpenOrders(): Map<string, Array<OpenOrders>> {\n  const ctx = useDexContext();\n  return ctx.openOrders;\n}\n\n// Lazy load a given market.\nexport function useMarket(market?: PublicKey): Market | undefined {\n  const { swapClient } = useDexContext();\n\n  const asyncMarket = useAsync(async () => {\n    if (!market) {\n      return undefined;\n    }\n    if (_MARKET_CACHE.get(market.toString())) {\n      return _MARKET_CACHE.get(market.toString());\n    }\n\n    const marketClient = new Promise<Market>(async (resolve) => {\n      // TODO: if we already have the mints, then pass them through to the\n      //       market client here to save a network request.\n      const marketClient = await Market.load(\n        swapClient.program.provider.connection,\n        market,\n        swapClient.program.provider.opts,\n        DEX_PID\n      );\n      resolve(marketClient);\n    });\n\n    _MARKET_CACHE.set(market.toString(), marketClient);\n    return marketClient;\n  }, [swapClient.program.provider.connection, market]);\n\n  if (asyncMarket.result) {\n    return asyncMarket.result;\n  }\n\n  return undefined;\n}\n\n// Lazy load the orderbook for a given market.\nexport function useOrderbook(market?: PublicKey): Orderbook | undefined {\n  const { swapClient } = useDexContext();\n  const marketClient = useMarket(market);\n  const [orderBookCache, setOrderBookCache] = useState(\n    new Map<string, Promise<Orderbook>>()\n  );\n\n  const asyncOrderbook = useAsync(async () => {\n    if (!market || !marketClient) {\n      return undefined;\n    }\n    if (orderBookCache.get(market.toString())) {\n      return orderBookCache.get(market.toString());\n    }\n\n    const orderbook = new Promise<Orderbook>(async (resolve) => {\n      const [bids, asks] = await Promise.all([\n        marketClient.loadBids(swapClient.program.provider.connection),\n        marketClient.loadAsks(swapClient.program.provider.connection),\n      ]);\n\n      resolve({\n        bids,\n        asks,\n      });\n    });\n\n    setOrderBookCache(\n      new Map(orderBookCache.set(market.toString(), orderbook))\n    );\n\n    return orderbook;\n  }, [swapClient.program.provider.connection, market, marketClient]);\n\n  // Stream in bids updates.\n  useEffect(() => {\n    let listener: number | undefined;\n    if (marketClient?.bidsAddress) {\n      listener = swapClient.program.provider.connection.onAccountChange(\n        marketClient?.bidsAddress,\n        async (info) => {\n          const bids = OrderbookSide.decode(marketClient, info.data);\n          const orderbook = await orderBookCache.get(\n            marketClient.address.toString()\n          );\n          const oldBestBid = orderbook?.bids.items(true).next().value;\n          const newBestBid = bids.items(true).next().value;\n          if (\n            orderbook &&\n            oldBestBid &&\n            newBestBid &&\n            oldBestBid.price !== newBestBid.price\n          ) {\n            const oldAsks = orderbook.asks;\n            const newtemp: Promise<Orderbook> = Promise.resolve({\n              asks: oldAsks,\n              bids: bids,\n            });\n            setOrderBookCache(\n              new Map(\n                orderBookCache.set(marketClient.address.toString(), newtemp)\n              )\n            );\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        swapClient.program.provider.connection.removeAccountChangeListener(\n          listener\n        );\n      }\n    };\n  }, [\n    marketClient,\n    marketClient?.bidsAddress,\n    swapClient.program.provider.connection,\n  ]);\n\n  // Stream in asks updates.\n  useEffect(() => {\n    let listener: number | undefined;\n    if (marketClient?.asksAddress) {\n      listener = swapClient.program.provider.connection.onAccountChange(\n        marketClient?.asksAddress,\n        async (info) => {\n          const asks = OrderbookSide.decode(marketClient, info.data);\n          const orderbook = await orderBookCache.get(\n            marketClient.address.toString()\n          );\n          const oldBestOffer = orderbook?.asks.items(false).next().value;\n          const newBestOffer = asks.items(false).next().value;\n          if (\n            orderbook &&\n            oldBestOffer &&\n            newBestOffer &&\n            oldBestOffer.price !== newBestOffer.price\n          ) {\n            const oldBids = orderbook.bids;\n            const newtemp: Promise<Orderbook> = Promise.resolve({\n              asks: asks,\n              bids: oldBids,\n            });\n            setOrderBookCache(\n              new Map(\n                orderBookCache.set(marketClient.address.toString(), newtemp)\n              )\n            );\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        swapClient.program.provider.connection.removeAccountChangeListener(\n          listener\n        );\n      }\n    };\n  }, [\n    marketClient,\n    marketClient?.bidsAddress,\n    swapClient.program.provider.connection,\n  ]);\n\n  if (asyncOrderbook.result) {\n    return asyncOrderbook.result;\n  }\n\n  return undefined;\n}\n\nexport function useMarketName(market: PublicKey): string | null {\n  const tokenMap = useTokenMap();\n  const marketClient = useMarket(market);\n  if (!marketClient) {\n    return null;\n  }\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const name = `${baseTicker} / ${quoteTicker}`;\n  return name;\n}\n\n// Fair price for a given market, as defined by the mid.\nexport function useBbo(market?: PublicKey): Bbo | undefined {\n  const orderbook = useOrderbook(market);\n  if (orderbook === undefined) {\n    return undefined;\n  }\n  const bestBid = orderbook.bids.items(true).next().value;\n  const bestOffer = orderbook.asks.items(false).next().value;\n  if (!bestBid && !bestOffer) {\n    return {};\n  }\n  if (!bestBid) {\n    return { bestOffer: bestOffer.price };\n  }\n  if (!bestOffer) {\n    return { bestBid: bestBid.price };\n  }\n  const mid = (bestBid.price + bestOffer.price) / 2.0;\n  return { bestBid: bestBid.price, bestOffer: bestOffer.price, mid };\n}\n\n// Fair price for a theoretical toMint/fromMint market. I.e., the number\n// of `fromMint` tokens to purchase a single `toMint` token. Aggregates\n// across a trade route, if needed.\nexport function useFairRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): number | undefined {\n  const route = useRoute(fromMint, toMint);\n  const fromBbo = useBbo(route ? route[0] : undefined);\n  const fromMarket = useMarket(route ? route[0] : undefined);\n  const toBbo = useBbo(route ? route[1] : undefined);\n\n  if (route === null) {\n    return undefined;\n  }\n\n  if (route.length === 1 && fromBbo !== undefined) {\n    if (fromMarket === undefined) {\n      return undefined;\n    }\n    if (\n      fromMarket?.baseMintAddress.equals(fromMint) ||\n      (fromMarket?.baseMintAddress.equals(WRAPPED_SOL_MINT) &&\n        fromMint.equals(SOL_MINT))\n    ) {\n      return fromBbo.bestBid && 1.0 / fromBbo.bestBid;\n    } else {\n      return fromBbo.bestOffer && fromBbo.bestOffer;\n    }\n  }\n  if (\n    fromBbo === undefined ||\n    fromBbo.bestBid === undefined ||\n    toBbo === undefined ||\n    toBbo.bestOffer === undefined\n  ) {\n    return undefined;\n  }\n  return toBbo.bestOffer / fromBbo.bestBid;\n}\n\nexport function useRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): Array<PublicKey> | null {\n  const route = useRouteVerbose(fromMint, toMint);\n  if (route === null) {\n    return null;\n  }\n  return route.markets;\n}\n\n// Types of routes.\n//\n// 1. Direct trades on USDC quoted markets.\n// 2. Transitive trades across two USDC qutoed markets.\n// 3. Wormhole <-> Sollet one-to-one swap markets.\n// 4. Wormhole <-> Native one-to-one swap markets.\n//\nexport function useRouteVerbose(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): { markets: Array<PublicKey>; kind: RouteKind } | null {\n  const { swapClient } = useDexContext();\n  const { wormholeMap, solletMap } = useTokenListContext();\n  const asyncRoute = useAsync(async () => {\n    const swapMarket = await wormholeSwapMarket(\n      swapClient.program.provider.connection,\n      fromMint,\n      toMint,\n      wormholeMap,\n      solletMap\n    );\n    if (swapMarket !== null) {\n      const [wormholeMarket, kind] = swapMarket;\n      return { markets: [wormholeMarket], kind };\n    }\n    const markets = swapClient.route(\n      fromMint.equals(SOL_MINT) ? WRAPPED_SOL_MINT : fromMint,\n      toMint.equals(SOL_MINT) ? WRAPPED_SOL_MINT : toMint\n    );\n    if (markets === null) {\n      return null;\n    }\n    const kind: RouteKind = \"usdx\";\n    return { markets, kind };\n  }, [fromMint, toMint, swapClient]);\n\n  if (asyncRoute.result) {\n    return asyncRoute.result;\n  }\n  return null;\n}\n\ntype Orderbook = {\n  bids: OrderbookSide;\n  asks: OrderbookSide;\n};\n\n// Wormhole utils.\n\ntype RouteKind = \"wormhole-native\" | \"wormhole-sollet\" | \"usdx\";\n\n// Maps fromMint || toMint (in sort order) to swap market public key.\n// All markets for wormhole<->native tokens should be here, e.g.\n// USDC <-> wUSDC.\nconst WORMHOLE_NATIVE_MAP = new Map<string, PublicKey>([\n  [wormKey(WORM_USDC_MINT, USDC_MINT), WORM_USDC_MARKET],\n  [wormKey(WORM_USDT_MINT, USDT_MINT), WORM_USDT_MARKET],\n]);\n\nfunction wormKey(fromMint: PublicKey, toMint: PublicKey): string {\n  const [first, second] =\n    fromMint < toMint ? [fromMint, toMint] : [toMint, fromMint];\n  return first.toString() + second.toString();\n}\n\nasync function wormholeSwapMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<[PublicKey, RouteKind] | null> {\n  let market = wormholeNativeMarket(fromMint, toMint);\n  if (market !== null) {\n    return [market, \"wormhole-native\"];\n  }\n  market = await wormholeSolletMarket(\n    conn,\n    fromMint,\n    toMint,\n    wormholeMap,\n    solletMap\n  );\n  if (market === null) {\n    return null;\n  }\n  return [market, \"wormhole-sollet\"];\n}\n\nfunction wormholeNativeMarket(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): PublicKey | null {\n  return WORMHOLE_NATIVE_MAP.get(wormKey(fromMint, toMint)) ?? null;\n}\n\n// Returns the market address of the 1-1 sollet<->wormhole swap market if it\n// exists. Otherwise, returns null.\nasync function wormholeSolletMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<PublicKey | null> {\n  const fromWormhole = wormholeMap.get(fromMint.toString());\n  const isFromWormhole = fromWormhole !== undefined;\n\n  const toWormhole = wormholeMap.get(toMint.toString());\n  const isToWormhole = toWormhole !== undefined;\n\n  const fromSollet = solletMap.get(fromMint.toString());\n  const isFromSollet = fromSollet !== undefined;\n\n  const toSollet = solletMap.get(toMint.toString());\n  const isToSollet = toSollet !== undefined;\n\n  if ((isFromWormhole || isToWormhole) && isFromWormhole !== isToWormhole) {\n    if ((isFromSollet || isToSollet) && isFromSollet !== isToSollet) {\n      const base = isFromSollet ? fromMint : toMint;\n      const [quote, wormholeInfo] = isFromWormhole\n        ? [fromMint, fromWormhole]\n        : [toMint, toWormhole];\n\n      const solletInfo = await fetchSolletInfo(base);\n\n      if (solletInfo.erc20Contract !== wormholeInfo!.extensions?.address) {\n        return null;\n      }\n\n      const market = await deriveWormholeMarket(base, quote);\n      if (market === null) {\n        return null;\n      }\n\n      const marketExists = await requestWormholeSwapMarketIfNeeded(\n        conn,\n        base,\n        quote,\n        market,\n        solletInfo\n      );\n      if (!marketExists) {\n        return null;\n      }\n\n      return market;\n    }\n  }\n  return null;\n}\n\n// Calculates the deterministic address for the sollet<->wormhole 1-1 swap\n// market.\nasync function deriveWormholeMarket(\n  baseMint: PublicKey,\n  quoteMint: PublicKey,\n  version = 0\n): Promise<PublicKey | null> {\n  if (version > 99) {\n    console.log(\"Swap market version cannot be greater than 99\");\n    return null;\n  }\n  if (version < 0) {\n    console.log(\"Version cannot be less than zero\");\n    return null;\n  }\n\n  const padToTwo = (n: number) => (n <= 99 ? `0${n}`.slice(-2) : n);\n  const seed =\n    baseMint.toString().slice(0, 15) +\n    quoteMint.toString().slice(0, 15) +\n    padToTwo(version);\n  return await PublicKey.createWithSeed(WORM_MARKET_BASE, seed, DEX_PID);\n}\n\ntype Bbo = {\n  bestBid?: number;\n  bestOffer?: number;\n  mid?: number;\n};\n\nconst _ORDERBOOK_CACHE = new Map<string, Promise<Orderbook>>();\nconst _MARKET_CACHE = new Map<string, Promise<Market>>();\n","import * as assert from \"assert\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  Token,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Market } from \"@project-serum/serum\";\nimport { SRM_MINT, USDC_MINT, USDT_MINT } from \"../utils/pubkeys\";\nimport {\n  useFairRoute,\n  useRouteVerbose,\n  useDexContext,\n  FEE_MULTIPLIER,\n} from \"./Dex\";\nimport {\n  useTokenListContext,\n  SPL_REGISTRY_SOLLET_TAG,\n  SPL_REGISTRY_WORM_TAG,\n} from \"./TokenList\";\nimport { useOwnedTokenAccount } from \"../context/Token\";\n\nconst DEFAULT_SLIPPAGE_PERCENT = 0.5;\n\nexport type SwapContext = {\n  // Mint being traded from. The user must own these tokens.\n  fromMint: PublicKey;\n  setFromMint: (m: PublicKey) => void;\n\n  // Mint being traded to. The user will receive these tokens after the swap.\n  toMint: PublicKey;\n  setToMint: (m: PublicKey) => void;\n\n  // Amount used for the swap.\n  fromAmount: number;\n  setFromAmount: (a: number) => void;\n\n  // *Expected* amount received from the swap.\n  toAmount: number;\n  setToAmount: (a: number) => void;\n\n  // Function to flip what we consider to be the \"to\" and \"from\" mints.\n  swapToFromMints: () => void;\n\n  // The amount (in units of percent) a swap can be off from the estimate\n  // shown to the user.\n  slippage: number;\n  setSlippage: (n: number) => void;\n\n  // Null if the user is using fairs directly from DEX prices.\n  // Otherwise, a user specified override for the price to use when calculating\n  // swap amounts.\n  fairOverride: number | null;\n  setFairOverride: (n: number | null) => void;\n\n  // The referral *owner* address. Associated token accounts must be created,\n  // first, for this to be used.\n  referral?: PublicKey;\n\n  // True if all newly created market accounts should be closed in the\n  // same user flow (ideally in the same transaction).\n  isClosingNewAccounts: boolean;\n\n  // True if the swap exchange rate should be a function of nothing but the\n  // from and to tokens, ignoring any quote tokens that may have been\n  // accumulated by performing the swap.\n  //\n  // Always false (for now).\n  isStrict: boolean;\n  setIsStrict: (isStrict: boolean) => void;\n\n  setIsClosingNewAccounts: (b: boolean) => void;\n};\nconst _SwapContext = React.createContext<null | SwapContext>(null);\n\nexport function SwapContextProvider(props: any) {\n  const [fromMint, setFromMint] = useState(props.fromMint ?? SRM_MINT);\n  const [toMint, setToMint] = useState(props.toMint ?? USDC_MINT);\n  const [fromAmount, _setFromAmount] = useState(props.fromAmount ?? 0);\n  const [toAmount, _setToAmount] = useState(props.toAmount ?? 0);\n  const [isClosingNewAccounts, setIsClosingNewAccounts] = useState(false);\n  const [isStrict, setIsStrict] = useState(false);\n  const [slippage, setSlippage] = useState(DEFAULT_SLIPPAGE_PERCENT);\n  const [fairOverride, setFairOverride] = useState<number | null>(null);\n  const fair = _useSwapFair(fromMint, toMint, fairOverride);\n  const referral = props.referral;\n\n  assert.ok(slippage >= 0);\n\n  useEffect(() => {\n    if (!fair) {\n      return;\n    }\n    setFromAmount(fromAmount);\n  }, [fair]);\n\n  const swapToFromMints = () => {\n    const oldFrom = fromMint;\n    const oldTo = toMint;\n    const oldToAmount = toAmount;\n    _setFromAmount(oldToAmount);\n    setFromMint(oldTo);\n    setToMint(oldFrom);\n  };\n\n  const setFromAmount = (amount: number) => {\n    if (fair === undefined) {\n      _setFromAmount(0);\n      _setToAmount(0);\n      return;\n    }\n    _setFromAmount(amount);\n    _setToAmount(FEE_MULTIPLIER * (amount / fair));\n  };\n\n  const setToAmount = (amount: number) => {\n    if (fair === undefined) {\n      _setFromAmount(0);\n      _setToAmount(0);\n      return;\n    }\n    _setToAmount(amount);\n    _setFromAmount((amount * fair) / FEE_MULTIPLIER);\n  };\n\n  return (\n    <_SwapContext.Provider\n      value={{\n        fromMint,\n        setFromMint,\n        toMint,\n        setToMint,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        swapToFromMints,\n        slippage,\n        setSlippage,\n        fairOverride,\n        setFairOverride,\n        isClosingNewAccounts,\n        isStrict,\n        setIsStrict,\n        setIsClosingNewAccounts,\n        referral,\n      }}\n    >\n      {props.children}\n    </_SwapContext.Provider>\n  );\n}\n\nexport function useSwapContext(): SwapContext {\n  const ctx = useContext(_SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useSwapFair(): number | undefined {\n  const { fairOverride, fromMint, toMint } = useSwapContext();\n  return _useSwapFair(fromMint, toMint, fairOverride);\n}\n\nfunction _useSwapFair(\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  fairOverride: number | null\n): number | undefined {\n  const fairRoute = useFairRoute(fromMint, toMint);\n  const fair = fairOverride === null ? fairRoute : fairOverride;\n  return fair;\n}\n\n// Returns true if the user can swap with the current context.\nexport function useCanSwap(): boolean {\n  const { fromMint, toMint, fromAmount, toAmount } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const { wormholeMap, solletMap } = useTokenListContext();\n  const fromWallet = useOwnedTokenAccount(fromMint);\n  const fair = useSwapFair();\n  const route = useRouteVerbose(fromMint, toMint);\n  if (route === null) {\n    return false;\n  }\n\n  return (\n    // From wallet exists.\n    fromWallet !== undefined &&\n    fromWallet !== null &&\n    // Fair price is defined.\n    fair !== undefined &&\n    fair > 0 &&\n    // Mints are distinct.\n    fromMint.equals(toMint) === false &&\n    // Wallet is connected.\n    swapClient.program.provider.wallet.publicKey !== null &&\n    // Trade amounts greater than zero.\n    fromAmount > 0 &&\n    toAmount > 0 &&\n    // Trade route exists.\n    route !== null &&\n    // Wormhole <-> native markets must have the wormhole token as the\n    // *from* address since they're one-sided markets.\n    (route.kind !== \"wormhole-native\" ||\n      wormholeMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_WORM_TAG) !== undefined) &&\n    // Wormhole <-> sollet markets must have the sollet token as the\n    // *from* address since they're one sided markets.\n    (route.kind !== \"wormhole-sollet\" ||\n      solletMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_SOLLET_TAG) !== undefined)\n  );\n}\n\nexport function useReferral(fromMarket?: Market): PublicKey | undefined {\n  const { referral } = useSwapContext();\n  const asyncReferral = useAsync(async () => {\n    if (!referral) {\n      return undefined;\n    }\n    if (!fromMarket) {\n      return undefined;\n    }\n    if (\n      !fromMarket.quoteMintAddress.equals(USDC_MINT) &&\n      !fromMarket.quoteMintAddress.equals(USDT_MINT)\n    ) {\n      return undefined;\n    }\n\n    return Token.getAssociatedTokenAddress(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      fromMarket.quoteMintAddress,\n      referral\n    );\n  }, [fromMarket]);\n\n  if (!asyncReferral.result) {\n    return undefined;\n  }\n  return asyncReferral.result;\n}\n","import { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenInfo } from \"../spl-token-registry\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  List,\n  ListItem,\n  Typography,\n  Chip,\n  Avatar,\n  Tabs,\n  Tab,\n} from \"@material-ui/core\";\nimport { TokenIcon } from \"./Swap\";\nimport { useSwappableTokens } from \"../context/TokenList\";\nimport { useMediaQuery } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  dialogContent: {\n    padding: 0,\n  },\n  textField: {\n    marginBottom: \"8px\",\n  },\n  tab: {\n    minWidth: \"134px\",\n  },\n  tabSelected: {\n    color: theme.palette.primary.contrastText,\n    fontWeight: 700,\n    backgroundColor: theme.palette.primary.main,\n    borderRadius: \"10px\",\n  },\n  tabIndicator: {\n    opacity: 0,\n  },\n}));\n\nexport default function TokenDialog({\n  open,\n  onClose,\n  setMint,\n}: {\n  open: boolean;\n  onClose: () => void;\n  setMint: (mint: PublicKey) => void;\n}) {\n  const [tabSelection, setTabSelection] = useState(0);\n  const [tokenFilter, setTokenFilter] = useState(\"\");\n  const filter = tokenFilter.toLowerCase();\n  const styles = useStyles();\n  const {\n    swappableTokens,\n    swappableTokensSollet,\n    swappableTokensWormhole,\n    commonTokenBases,\n  } = useSwappableTokens();\n  const displayTabs = !useMediaQuery(\"(max-width:450px)\");\n  const selectedTokens =\n    tabSelection === 0\n      ? swappableTokens\n      : tabSelection === 1\n      ? swappableTokensWormhole\n      : swappableTokensSollet;\n  let tokens =\n    tokenFilter === \"\"\n      ? selectedTokens\n      : selectedTokens.filter(\n          (t) =>\n            t.symbol.toLowerCase().startsWith(filter) ||\n            t.name.toLowerCase().startsWith(filter) ||\n            t.address.toLowerCase().startsWith(filter)\n        );\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      scroll={\"paper\"}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n          width: \"420px\",\n        },\n      }}\n    >\n      <DialogTitle style={{ fontWeight: \"bold\" }}>\n        <Typography variant=\"h6\" style={{ paddingBottom: \"16px\" }}>\n          Select a token\n        </Typography>\n        <TextField\n          className={styles.textField}\n          placeholder={\"Search name\"}\n          value={tokenFilter}\n          fullWidth\n          variant=\"outlined\"\n          onChange={(e) => setTokenFilter(e.target.value)}\n        />\n      </DialogTitle>\n      <DialogContent className={styles.dialogContent} dividers={true}>\n        <List disablePadding>\n          <CommonBases\n            commonTokenBases={commonTokenBases}\n            onClick={(mint) => {\n              setMint(mint);\n              onClose();\n            }}\n          />\n          {tokens.map((tokenInfo: TokenInfo) => (\n            <TokenListItem\n              key={tokenInfo.address}\n              tokenInfo={tokenInfo}\n              onClick={(mint) => {\n                setMint(mint);\n                onClose();\n              }}\n            />\n          ))}\n        </List>\n      </DialogContent>\n      {displayTabs && (\n        <DialogActions>\n          <Tabs\n            value={tabSelection}\n            onChange={(e, v) => setTabSelection(v)}\n            classes={{\n              indicator: styles.tabIndicator,\n            }}\n          >\n            <Tab\n              value={0}\n              className={styles.tab}\n              classes={{ selected: styles.tabSelected }}\n              label=\"SHROOMZ Selection\"\n            />\n\n          </Tabs>\n        </DialogActions>\n      )}\n    </Dialog>\n  );\n}\n\nfunction TokenListItem({\n  tokenInfo,\n  onClick,\n}: {\n  tokenInfo: TokenInfo;\n  onClick: (mint: PublicKey) => void;\n}) {\n  const mint = new PublicKey(tokenInfo.address);\n  return (\n    <ListItem\n      button\n      onClick={() => onClick(mint)}\n      style={{ padding: \"10px 20px\" }}\n    >\n      <TokenIcon mint={mint} style={{ width: \"30px\", borderRadius: \"15px\" }} />\n      <TokenName tokenInfo={tokenInfo} />\n    </ListItem>\n  );\n}\n\nfunction TokenName({ tokenInfo }: { tokenInfo: TokenInfo }) {\n  return (\n    <div style={{ marginLeft: \"16px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>\n        {tokenInfo?.symbol}\n      </Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n        {tokenInfo?.name}\n      </Typography>\n    </div>\n  );\n}\n\nfunction CommonBases({\n  commonTokenBases,\n  onClick,\n}: {\n  commonTokenBases: TokenInfo[];\n  onClick: (mint: PublicKey) => void;\n}) {\n  return (\n    <div style={{ padding: \"0 20px 20px 20px\" }}>\n      <h4>Featured Token</h4>\n      {commonTokenBases?.map((tokenInfo: TokenInfo) => {\n        const mint = new PublicKey(tokenInfo.address);\n        return (\n          <Chip\n            key={tokenInfo.address}\n            avatar={<Avatar alt={tokenInfo?.name} src={tokenInfo?.logoURI} />}\n            variant=\"outlined\"\n            label={tokenInfo?.symbol}\n            onClick={() => onClick(mint)}\n            style={{ margin: \"5px\" }}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","import { useState, useMemo, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { BN } from \"@project-serum/anchor\";\nimport { OpenOrders } from \"@project-serum/serum\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogContent,\n  Paper,\n  Table,\n  TableRow,\n  TableHead,\n  TableCell,\n  TableBody,\n  TableContainer,\n  IconButton,\n  Typography,\n  Button,\n  Select,\n  MenuItem,\n  Link,\n} from \"@material-ui/core\";\nimport { Close } from \"@material-ui/icons\";\nimport { useMarket, useOpenOrders, useDexContext } from \"../context/Dex\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\nimport { DEX_PID } from \"../utils/pubkeys\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {},\n  closeAccount: {\n    color: theme.palette.error.main,\n  },\n}));\n\nexport default function OpenOrdersDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog\n      maxWidth=\"lg\"\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n        },\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n        }}\n      >\n        <IconButton\n          onClick={onClose}\n          style={{\n            padding: 10,\n          }}\n        >\n          <Close />\n        </IconButton>\n      </div>\n      <DialogContent style={{ paddingTop: 0 }}>\n        <OpenOrdersAccounts />\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction OpenOrdersAccounts() {\n  const styles = useStyles();\n  const openOrders = useOpenOrders();\n  const openOrdersEntries: Array<[PublicKey, OpenOrders[]]> = useMemo(() => {\n    return Array.from(openOrders.entries()).map(([market, oo]) => [\n      new PublicKey(market),\n      oo,\n    ]);\n  }, [openOrders]);\n  return (\n    <TableContainer component={Paper} elevation={0}>\n      <Table className={styles.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Market</TableCell>\n            <TableCell align=\"center\">Open Orders Account</TableCell>\n            <TableCell align=\"center\">Base Used</TableCell>\n            <TableCell align=\"center\">Base Free</TableCell>\n            <TableCell align=\"center\">Quote Used</TableCell>\n            <TableCell align=\"center\">Quote Free</TableCell>\n            <TableCell align=\"center\">Settle</TableCell>\n            <TableCell align=\"center\">Close</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {openOrdersEntries.map(([market, oos]) => {\n            return (\n              <OpenOrdersRow\n                key={market.toString()}\n                market={market}\n                openOrders={oos}\n              />\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction OpenOrdersRow({\n  market,\n  openOrders,\n}: {\n  market: PublicKey;\n  openOrders: Array<OpenOrders>;\n}) {\n  const styles = useStyles();\n  const [ooAccount, setOoAccount] = useState(openOrders[0]);\n  useEffect(() => {\n    setOoAccount(openOrders[0]);\n  }, [openOrders]);\n  const { swapClient, closeOpenOrders } = useDexContext();\n  const marketClient = useMarket(market);\n  const tokenMap = useTokenMap();\n  const base = useMint(marketClient?.baseMintAddress);\n  const quote = useMint(marketClient?.quoteMintAddress);\n  const baseWallet = useOwnedTokenAccount(marketClient?.baseMintAddress);\n  const quoteWallet = useOwnedTokenAccount(marketClient?.quoteMintAddress);\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const marketName =\n    baseTicker && quoteTicker\n      ? `${baseTicker} / ${quoteTicker}`\n      : market.toString();\n  const settleDisabled =\n    ooAccount.baseTokenFree.toNumber() + ooAccount.quoteTokenFree.toNumber() ===\n    0;\n  const closeDisabled =\n    ooAccount.baseTokenTotal.toNumber() +\n      ooAccount.quoteTokenTotal.toNumber() !==\n    0;\n\n  const settleFunds = async () => {\n    if (!marketClient) {\n      throw new Error(\"Market client not found\");\n    }\n    if (!baseWallet || !quoteWallet) {\n      throw new Error(\"Base or quote wallet not found\");\n    }\n    const referrerWallet = undefined;\n    const { transaction, signers } =\n      await marketClient.makeSettleFundsTransaction(\n        swapClient.program.provider.connection,\n        ooAccount,\n        baseWallet.publicKey,\n        quoteWallet.publicKey,\n        referrerWallet\n      );\n    await swapClient.program.provider.send(transaction, signers);\n  };\n\n  const _closeOpenOrders = async () => {\n    await swapClient.program.rpc.closeAccount({\n      accounts: {\n        openOrders: ooAccount.address,\n        authority: swapClient.program.provider.wallet.publicKey,\n        destination: swapClient.program.provider.wallet.publicKey,\n        market: marketClient!.address,\n        dexProgram: DEX_PID,\n      },\n    });\n    closeOpenOrders(ooAccount);\n  };\n\n  return (\n    <TableRow key={market.toString()}>\n      <TableCell component=\"th\" scope=\"row\">\n        <Typography>\n          <Link\n            href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            {marketName}\n          </Link>\n        </Typography>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Select\n          value={ooAccount.address.toString()}\n          onChange={(e) =>\n            setOoAccount(\n              openOrders.filter(\n                (oo) => oo.address.toString() === e.target.value\n              )[0]\n            )\n          }\n        >\n          {openOrders.map((oo) => {\n            return (\n              <MenuItem\n                key={oo.address.toString()}\n                value={oo.address.toString()}\n              >\n                {oo.address.toString()}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenTotal.sub(ooAccount.baseTokenFree))}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(\n          quote,\n          ooAccount.quoteTokenTotal.sub(ooAccount.quoteTokenFree)\n        )}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(quote, ooAccount.quoteTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button color=\"primary\" disabled={settleDisabled} onClick={settleFunds}>\n          Settle\n        </Button>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button\n          disabled={closeDisabled}\n          onClick={_closeOpenOrders}\n          className={styles.closeAccount}\n        >\n          Close\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nfunction toDisplay(mintInfo: MintInfo | undefined | null, value: BN): string {\n  if (!mintInfo) {\n    return value.toNumber().toString();\n  }\n  return (value.toNumber() / 10 ** mintInfo.decimals).toFixed(\n    mintInfo.decimals\n  );\n}\n","import { useState } from \"react\";\nimport {\n  makeStyles,\n  Popover,\n  IconButton,\n  Typography,\n  Button,\n  TextField,\n  InputAdornment,\n  Switch,\n  FormControlLabel,\n  FormGroup,\n} from \"@material-ui/core\";\nimport { SettingsOutlined as Settings } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport { useDexContext } from \"../context/Dex\";\nimport OpenOrdersDialog from \"./OpenOrdersDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  tab: {\n    width: \"50%\",\n  },\n  table: {},\n  settingsButton: {\n    padding: 0,\n    color: theme.palette.primary.main,\n  },\n  closeAccountSwitchLabel: {\n    color: theme.palette.text.secondary,\n  },\n  fairAutoSelected: {\n    backgroundColor: theme.palette.primary.main,\n    padding: \"3px 5px\",\n    borderRadius: \"10px\",\n    color: theme.palette.primary.contrastText,\n    fontWeight: 700,\n  },\n  fairAuto: {\n    backgroundColor:\n      theme.palette.type === \"dark\"\n        ? theme.palette.secondary.light\n        : theme.palette.secondary.main,\n    padding: \"3px 5px\",\n    borderRadius: \"10px\",\n    boxShadow: \"none\",\n  },\n}));\n\nexport function SettingsButton() {\n  const styles = useStyles();\n\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.settingsButton}\n            >\n              <Settings />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{\n                style: {\n                  borderRadius: \"10px\",\n                  boxShadow: \"0px 0px 30px 5px rgba(0,0,0,0.075)\",\n                },\n              }}\n            >\n              <SettingsDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction SettingsDetails() {\n  const styles = useStyles();\n\n  const { slippage, setSlippage, fairOverride, setFairOverride } =\n    useSwapContext();\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\n  const fair = useSwapFair();\n  const { swapClient } = useDexContext();\n\n  const setSlippageHandler = (value?: number) => {\n    setSlippage(!value || value < 0 ? 0 : value);\n  };\n\n  return (\n    <div style={{ padding: \"15px\", width: \"305px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>Settings</Typography>\n      <div>\n        <div style={{ marginTop: \"10px\" }}>\n          <Typography color=\"textSecondary\" style={{ fontSize: \"12px\" }}>\n            Slippage tolerance\n          </Typography>\n          <TextField\n            type=\"number\"\n            placeholder=\"Error tolerance percentage\"\n            value={slippage}\n            onChange={(e) => setSlippageHandler(parseFloat(e.target.value))}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n          />\n        </div>\n        <div style={{ marginTop: \"10px\" }}>\n          <Typography color=\"textSecondary\" style={{ fontSize: \"12px\" }}>\n            Fair price\n          </Typography>\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              type=\"number\"\n              placeholder=\"Fair price override\"\n              value={fair}\n              onChange={(e) => setFairOverride(parseFloat(e.target.value))}\n              style={{\n                marginRight: \"10px\",\n                flex: 1,\n                display: \"flex\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n              }}\n              disabled={fairOverride === null}\n            />\n            <Button\n              component=\"div\"\n              variant=\"contained\"\n              onClick={() => {\n                if (fair === undefined) {\n                  console.error(\"Fair is undefined\");\n                  return;\n                }\n                if (fairOverride === null) {\n                  setFairOverride(fair);\n                } else {\n                  setFairOverride(null);\n                }\n              }}\n              className={\n                fairOverride === null\n                  ? styles.fairAutoSelected\n                  : styles.fairAuto\n              }\n            >\n              Auto\n            </Button>\n          </div>\n        </div>\n        <div style={{ margin: \"10px 0px\" }}>\n          <CloseNewAccountsSwitch />\n        </div>\n        <Button\n          variant=\"contained\"\n          fullWidth\n          disabled={swapClient.program.provider.wallet.publicKey === null}\n          onClick={() => setShowSettingsDialog(true)}\n        >\n          Manage Dex Accounts\n        </Button>\n      </div>\n      <OpenOrdersDialog\n        open={showSettingsDialog}\n        onClose={() => setShowSettingsDialog(false)}\n      />\n    </div>\n  );\n}\n\nfunction CloseNewAccountsSwitch() {\n  const styles = useStyles();\n  const { isClosingNewAccounts, setIsClosingNewAccounts } = useSwapContext();\n\n  return (\n    <FormGroup style={{ display: \"none\" }} row>\n      <FormControlLabel\n        classes={{ label: styles.closeAccountSwitchLabel }}\n        labelPlacement=\"start\"\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          marginLeft: 0,\n          width: \"100%\",\n        }}\n        control={\n          <Switch\n            checked={isClosingNewAccounts}\n            onChange={() => setIsClosingNewAccounts(!isClosingNewAccounts)}\n            color=\"primary\"\n          />\n        }\n        label=\"Close new accounts\"\n      />\n    </FormGroup>\n  );\n}\n","import {\n  makeStyles,\n  Typography,\n  Link,\n  Popover,\n  IconButton,\n} from \"@material-ui/core\";\nimport { Info } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport { useMint } from \"../context/Token\";\nimport { useRoute, useMarketName, useBbo } from \"../context/Dex\";\n\nconst useStyles = makeStyles(() => ({\n  infoLabel: {\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n  },\n  infoButton: {\n    marginLeft: \"5px\",\n    padding: 0,\n    fontSize: \"14px\",\n  },\n}));\n\nexport function InfoLabel() {\n  const styles = useStyles();\n\n  const { fromMint, toMint } = useSwapContext();\n  const fromMintInfo = useMint(fromMint);\n  const fair = useSwapFair();\n\n  const tokenMap = useTokenMap();\n  let fromTokenInfo = tokenMap.get(fromMint.toString());\n  let toTokenInfo = tokenMap.get(toMint.toString());\n\n  return (\n    <div className={styles.infoLabel}>\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n        {fair !== undefined && toTokenInfo && fromTokenInfo\n          ? `1 ${toTokenInfo.symbol} = ${fair.toFixed(\n              fromMintInfo?.decimals\n            )} ${fromTokenInfo.symbol}`\n          : `-`}\n      </Typography>\n      <InfoButton />\n    </div>\n  );\n}\n\nfunction InfoButton() {\n  const styles = useStyles();\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div style={{ display: \"flex\" }}>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.infoButton}\n            >\n              <Info fontSize=\"small\" />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{ style: { borderRadius: \"10px\" } }}\n              disableRestoreFocus\n            >\n              <InfoDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction InfoDetails() {\n  const { fromMint, toMint } = useSwapContext();\n  const route = useRoute(fromMint, toMint);\n  const tokenMap = useTokenMap();\n  const fromMintTicker = tokenMap.get(fromMint.toString())?.symbol;\n  const toMintTicker = tokenMap.get(toMint.toString())?.symbol;\n  const addresses = [\n    { ticker: fromMintTicker, mint: fromMint },\n    { ticker: toMintTicker, mint: toMint },\n  ];\n\n  return (\n    <div style={{ padding: \"15px\", width: \"250px\" }}>\n      <div>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Trade Route\n        </Typography>\n        {route ? (\n          route.map((market: PublicKey) => {\n            return <MarketRoute key={market.toString()} market={market} />;\n          })\n        ) : (\n          <Typography color=\"textSecondary\">Route not found</Typography>\n        )}\n      </div>\n      <div style={{ marginTop: \"15px\" }}>\n        <Typography\n          color=\"textSecondary\"\n          style={{ fontWeight: \"bold\", marginBottom: \"5px\" }}\n        >\n          Tokens\n        </Typography>\n        {addresses.map((address) => {\n          return (\n            <div\n              key={address.mint.toString()}\n              style={{\n                marginTop: \"5px\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Link\n                href={`https://explorer.solana.com/address/${address.mint.toString()}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                {address.ticker}\n              </Link>\n              <code style={{ width: \"128px\", overflow: \"hidden\" }}>\n                {address.mint.toString()}\n              </code>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction MarketRoute({ market }: { market: PublicKey }) {\n  const marketName = useMarketName(market);\n  const bbo = useBbo(market);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginTop: \"5px\",\n      }}\n    >\n      <Link\n        href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        {marketName}\n      </Link>\n      <code style={{ marginLeft: \"10px\" }}>\n        {bbo && bbo.mid ? bbo.mid.toFixed(6) : \"-\"}\n      </code>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport {\n  PublicKey,\n  Keypair,\n  Transaction,\n  SystemProgram,\n  Signer,\n} from \"@solana/web3.js\";\nimport { Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { BN, Provider } from \"@project-serum/anchor\";\nimport {\n  makeStyles,\n  Card,\n  Button,\n  Typography,\n  TextField,\n  useTheme,\n} from \"@material-ui/core\";\nimport { ExpandMore, ImportExportRounded } from \"@material-ui/icons\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport {\n  useDexContext,\n  useOpenOrders,\n  useRouteVerbose,\n  useMarket,\n  FEE_MULTIPLIER,\n} from \"../context/Dex\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\nimport { useCanSwap, useReferral } from \"../context/Swap\";\nimport TokenDialog from \"./TokenDialog\";\nimport { SettingsButton } from \"./Settings\";\nimport { InfoLabel } from \"./Info\";\nimport { SOL_MINT, WRAPPED_SOL_MINT } from \"../utils/pubkeys\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    width: theme.spacing(50),\n    borderRadius: theme.spacing(2),\n    boxShadow: \"0px 0px 30px 5px rgba(0,0,0,0.075)\",\n    padding: theme.spacing(2),\n  },\n  tab: {\n    width: \"50%\",\n  },\n  settingsButton: {\n    padding: 0,\n  },\n  swapButton: {\n    width: \"100%\",\n    borderRadius: theme.spacing(2),\n    backgroundColor: theme.palette.primary.main,\n    color: 'theme.palette.primary.contrastText',\n    fontSize: 16,\n    fontWeight: 700,\n    padding: theme.spacing(1.5),\n  },\n  swapToFromButton: {\n    display: \"block\",\n    margin: \"10px auto 10px auto\",\n    cursor: \"pointer\",\n  },\n  amountInput: {\n    fontSize: 22,\n    fontWeight: 600,\n  },\n  input: {\n    textAlign: \"right\",\n  },\n  swapTokenFormContainer: {\n    borderRadius: theme.spacing(2),\n    boxShadow: \"0px 0px 15px 2px rgba(33,150,243,0.1)\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: theme.spacing(1),\n  },\n  swapTokenSelectorContainer: {\n    marginLeft: theme.spacing(1),\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"50%\",\n  },\n  balanceContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"14px\",\n  },\n  maxButton: {\n    marginLeft: theme.spacing(1),\n    color: theme.palette.primary.main,\n    fontWeight: 700,\n    fontSize: \"12px\",\n    cursor: \"pointer\",\n  },\n  tokenButton: {\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nexport default function SwapCard({\n  containerStyle,\n  contentStyle,\n  swapTokenContainerStyle,\n}: {\n  containerStyle?: any;\n  contentStyle?: any;\n  swapTokenContainerStyle?: any;\n}) {\n  const styles = useStyles();\n  return (\n    <Card className={styles.card} style={containerStyle}>\n      <SwapHeader />\n      <div style={contentStyle}>\n        <SwapFromForm style={swapTokenContainerStyle} />\n        <ArrowButton />\n        <SwapToForm style={swapTokenContainerStyle} />\n        <InfoLabel />\n        <SwapButton />\n      </div>\n    </Card>\n  );\n}\n\nexport function SwapHeader() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginBottom: \"16px\",\n      }}\n    >\n      <Typography\n        style={{\n          fontSize: 18,\n          fontWeight: 700,\n          color: \"gold\",\n        }}\n      >\n        SHROOMZ SWAP\n      </Typography>\n      <SettingsButton />\n    </div>\n  );\n}\n\nexport function ArrowButton() {\n  const styles = useStyles();\n  const theme = useTheme();\n  const { swapToFromMints } = useSwapContext();\n  return (\n    <ImportExportRounded\n      className={styles.swapToFromButton}\n      fontSize=\"large\"\n      htmlColor={theme.palette.primary.main}\n      onClick={swapToFromMints}\n    />\n  );\n}\n\nfunction SwapFromForm({ style }: { style?: any }) {\n  const { fromMint, setFromMint, fromAmount, setFromAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      from\n      style={style}\n      mint={fromMint}\n      setMint={setFromMint}\n      amount={fromAmount}\n      setAmount={setFromAmount}\n    />\n  );\n}\n\nfunction SwapToForm({ style }: { style?: any }) {\n  const { toMint, setToMint, toAmount, setToAmount } = useSwapContext();\n  return (\n    <SwapTokenForm\n      from={false}\n      style={style}\n      mint={toMint}\n      setMint={setToMint}\n      amount={toAmount}\n      setAmount={setToAmount}\n    />\n  );\n}\n\nexport function SwapTokenForm({\n  from,\n  style,\n  mint,\n  setMint,\n  amount,\n  setAmount,\n}: {\n  from: boolean;\n  style?: any;\n  mint: PublicKey;\n  setMint: (m: PublicKey) => void;\n  amount: number;\n  setAmount: (a: number) => void;\n}) {\n  const styles = useStyles();\n\n  const [showTokenDialog, setShowTokenDialog] = useState(false);\n  const tokenAccount = useOwnedTokenAccount(mint);\n  const mintAccount = useMint(mint);\n\n  const balance =\n    tokenAccount &&\n    mintAccount &&\n    tokenAccount.account.amount.toNumber() / 10 ** mintAccount.decimals;\n\n  const formattedAmount =\n    mintAccount && amount\n      ? amount.toLocaleString(\"fullwide\", {\n          maximumFractionDigits: mintAccount.decimals,\n          useGrouping: false,\n        })\n      : amount;\n\n  return (\n    <div className={styles.swapTokenFormContainer} style={style}>\n      <div className={styles.swapTokenSelectorContainer}>\n        <TokenButton mint={mint} onClick={() => setShowTokenDialog(true)} />\n        <Typography color=\"textSecondary\" className={styles.balanceContainer}>\n          {tokenAccount && mintAccount\n            ? `Balance: ${balance?.toFixed(mintAccount.decimals)}`\n            : `-`}\n          {from && !!balance ? (\n            <span\n              className={styles.maxButton}\n              onClick={() => setAmount(balance)}\n            >\n              MAX\n            </span>\n          ) : null}\n        </Typography>\n      </div>\n      <TextField\n        type=\"number\"\n        value={formattedAmount}\n        onChange={(e) => setAmount(parseFloat(e.target.value))}\n        InputProps={{\n          disableUnderline: true,\n          classes: {\n            root: styles.amountInput,\n            input: styles.input,\n          },\n        }}\n      />\n      <TokenDialog\n        setMint={setMint}\n        open={showTokenDialog}\n        onClose={() => setShowTokenDialog(false)}\n      />\n    </div>\n  );\n}\n\nfunction TokenButton({\n  mint,\n  onClick,\n}: {\n  mint: PublicKey;\n  onClick: () => void;\n}) {\n  const styles = useStyles();\n  const theme = useTheme();\n\n  return (\n    <div onClick={onClick} className={styles.tokenButton}>\n      <TokenIcon mint={mint} style={{ width: theme.spacing(4) }} />\n      <TokenName mint={mint} style={{ fontSize: 14, fontWeight: 700 }} />\n      <ExpandMore />\n    </div>\n  );\n}\n\nexport function TokenIcon({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenMap = useTokenMap();\n  let tokenInfo = tokenMap.get(mint.toString());\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {tokenInfo?.logoURI ? (\n        <img alt=\"Logo\" style={style} src={tokenInfo?.logoURI} />\n      ) : (\n        <div style={style}></div>\n      )}\n    </div>\n  );\n}\n\nfunction TokenName({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenMap = useTokenMap();\n  const theme = useTheme();\n  let tokenInfo = tokenMap.get(mint.toString());\n\n  return (\n    <Typography\n      style={{\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(1),\n        ...style,\n      }}\n    >\n      {tokenInfo?.symbol}\n    </Typography>\n  );\n}\n\nexport function SwapButton() {\n  const styles = useStyles();\n  const {\n    fromMint,\n    toMint,\n    fromAmount,\n    slippage,\n    isClosingNewAccounts,\n    isStrict,\n  } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const fromMintInfo = useMint(fromMint);\n  const toMintInfo = useMint(toMint);\n  const openOrders = useOpenOrders();\n  const route = useRouteVerbose(fromMint, toMint);\n  const fromMarket = useMarket(\n    route && route.markets ? route.markets[0] : undefined\n  );\n  const toMarket = useMarket(\n    route && route.markets ? route.markets[1] : undefined\n  );\n  const canSwap = useCanSwap();\n  const referral = useReferral(fromMarket);\n  const fair = useSwapFair();\n  let fromWallet = useOwnedTokenAccount(fromMint);\n  let toWallet = useOwnedTokenAccount(toMint);\n  const quoteMint = fromMarket && fromMarket.quoteMintAddress;\n  const quoteMintInfo = useMint(quoteMint);\n  const quoteWallet = useOwnedTokenAccount(quoteMint);\n\n  // Click handler.\n  const sendSwapTransaction = async () => {\n    if (!fromMintInfo || !toMintInfo) {\n      throw new Error(\"Unable to calculate mint decimals\");\n    }\n    if (!fair) {\n      throw new Error(\"Invalid fair\");\n    }\n    if (!quoteMint || !quoteMintInfo) {\n      throw new Error(\"Quote mint not found\");\n    }\n\n    const amount = new BN(fromAmount * 10 ** fromMintInfo.decimals);\n    const isSol = fromMint.equals(SOL_MINT) || toMint.equals(SOL_MINT);\n    const wrappedSolAccount = isSol ? Keypair.generate() : undefined;\n\n    // Build the swap.\n    let txs = await (async () => {\n      if (!fromMarket) {\n        throw new Error(\"Market undefined\");\n      }\n\n      const minExchangeRate = {\n        rate: new BN((10 ** toMintInfo.decimals * FEE_MULTIPLIER) / fair)\n          .muln(100 - slippage)\n          .divn(100),\n        fromDecimals: fromMintInfo.decimals,\n        quoteDecimals: quoteMintInfo.decimals,\n        strict: isStrict,\n      };\n      const fromOpenOrders = fromMarket\n        ? openOrders.get(fromMarket?.address.toString())\n        : undefined;\n      const toOpenOrders = toMarket\n        ? openOrders.get(toMarket?.address.toString())\n        : undefined;\n      const fromWalletAddr = fromMint.equals(SOL_MINT)\n        ? wrappedSolAccount!.publicKey\n        : fromWallet\n        ? fromWallet.publicKey\n        : undefined;\n      const toWalletAddr = toMint.equals(SOL_MINT)\n        ? wrappedSolAccount!.publicKey\n        : toWallet\n        ? toWallet.publicKey\n        : undefined;\n\n      return await swapClient.swapTxs({\n        fromMint,\n        toMint,\n        quoteMint,\n        amount,\n        minExchangeRate,\n        referral,\n        fromMarket,\n        toMarket,\n        // Automatically created if undefined.\n        fromOpenOrders: fromOpenOrders ? fromOpenOrders[0].address : undefined,\n        toOpenOrders: toOpenOrders ? toOpenOrders[0].address : undefined,\n        fromWallet: fromWalletAddr,\n        toWallet: toWalletAddr,\n        quoteWallet: quoteWallet ? quoteWallet.publicKey : undefined,\n        // Auto close newly created open orders accounts.\n        close: isClosingNewAccounts,\n      });\n    })();\n\n    // If swapping SOL, then insert a wrap/unwrap instruction.\n    if (isSol) {\n      if (txs.length > 1) {\n        throw new Error(\"SOL must be swapped in a single transaction\");\n      }\n      const { tx: wrapTx, signers: wrapSigners } = await wrapSol(\n        swapClient.program.provider,\n        wrappedSolAccount as Keypair,\n        fromMint,\n        amount\n      );\n      const { tx: unwrapTx, signers: unwrapSigners } = unwrapSol(\n        swapClient.program.provider,\n        wrappedSolAccount as Keypair\n      );\n      const tx = new Transaction();\n      tx.add(wrapTx);\n      tx.add(txs[0].tx);\n      tx.add(unwrapTx);\n      txs[0].tx = tx;\n      txs[0].signers.push(...wrapSigners);\n      txs[0].signers.push(...unwrapSigners);\n    }\n\n    await swapClient.program.provider.sendAll(txs);\n  };\n  return (\n    <Button\n      variant=\"contained\"\n      className={styles.swapButton}\n      onClick={sendSwapTransaction}\n      disabled={!canSwap}\n    >\n      Swap\n    </Button>\n  );\n}\n\nasync function wrapSol(\n  provider: Provider,\n  wrappedSolAccount: Keypair,\n  fromMint: PublicKey,\n  amount: BN\n): Promise<{ tx: Transaction; signers: Array<Signer | undefined> }> {\n  const tx = new Transaction();\n  const signers = [wrappedSolAccount];\n  // Create new, rent exempt account.\n  tx.add(\n    SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey: wrappedSolAccount.publicKey,\n      lamports: await Token.getMinBalanceRentForExemptAccount(\n        provider.connection\n      ),\n      space: 165,\n      programId: TOKEN_PROGRAM_ID,\n    })\n  );\n  // Transfer lamports. These will be converted to an SPL balance by the\n  // token program.\n  if (fromMint.equals(SOL_MINT)) {\n    tx.add(\n      SystemProgram.transfer({\n        fromPubkey: provider.wallet.publicKey,\n        toPubkey: wrappedSolAccount.publicKey,\n        lamports: amount.toNumber(),\n      })\n    );\n  }\n  // Initialize the account.\n  tx.add(\n    Token.createInitAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      WRAPPED_SOL_MINT,\n      wrappedSolAccount.publicKey,\n      provider.wallet.publicKey\n    )\n  );\n  return { tx, signers };\n}\n\nfunction unwrapSol(\n  provider: Provider,\n  wrappedSolAccount: Keypair\n): { tx: Transaction; signers: Array<Signer | undefined> } {\n  const tx = new Transaction();\n  tx.add(\n    Token.createCloseAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      wrappedSolAccount.publicKey,\n      provider.wallet.publicKey,\n      provider.wallet.publicKey,\n      []\n    )\n  );\n  return { tx, signers: [] };\n}\n","import { ReactElement } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenListContainer } from \"./spl-token-registry\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  createTheme,\n  ThemeOptions,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport {\n  SwapContextProvider,\n  useSwapContext,\n  useSwapFair,\n} from \"./context/Swap\";\nimport {\n  DexContextProvider,\n  useBbo,\n  useFairRoute,\n  useMarketName,\n} from \"./context/Dex\";\nimport { TokenListContextProvider, useTokenMap } from \"./context/TokenList\";\nimport { TokenContextProvider, useMint } from \"./context/Token\";\nimport SwapCard, {\n  ArrowButton,\n  SwapButton,\n  SwapHeader,\n  SwapTokenForm,\n} from \"./components/Swap\";\nimport TokenDialog from \"./components/TokenDialog\";\n\n/**\n * A`Swap` component that can be embedded into applications. To use,\n * one can, minimally, provide a provider and token list to the component.\n * For example,\n *\n * ```javascript\n * <Swap provider={provider} tokenList={tokenList} />\n * ```\n *\n * All of the complexity of communicating with the Serum DEX and managing\n * its data is handled internally by the component.\n *\n * For information on other properties like earning referrals, see the\n * [[SwapProps]] documentation.\n */\nexport default function Swap(props: SwapProps): ReactElement {\n  const {\n    containerStyle,\n    contentStyle,\n    swapTokenContainerStyle,\n    materialTheme,\n    provider,\n    tokenList,\n    commonBases,\n    fromMint,\n    toMint,\n    fromAmount,\n    toAmount,\n    referral,\n  } = props;\n\n  // @ts-ignore\n  const swapClient = new SwapClient(provider, tokenList);\n  const theme = createTheme(\n    materialTheme || {\n      palette: {\n        type:'dark',\n        primary: {\n          main: \"#ebae37\",\n        },\n        secondary: {\n          main: \"#f48fb1\",\n        },\n        background: {\n          default: '#ebae37',\n          paper: '#424242',\n        },\n        info: {\n          main: '#ebae37',\n        },  \n        \n      },\n    }\n  );\n  return (\n    <ThemeProvider theme={theme}>\n      <TokenListContextProvider tokenList={tokenList} provider={provider} commonBases={commonBases}>\n        <TokenContextProvider provider={provider}>\n          <DexContextProvider swapClient={swapClient}>\n            <SwapContextProvider\n              fromMint={fromMint}\n              toMint={toMint}\n              fromAmount={fromAmount}\n              toAmount={toAmount}\n              referral={referral}\n            >\n              <SwapCard\n                containerStyle={containerStyle}\n                contentStyle={contentStyle}\n                swapTokenContainerStyle={swapTokenContainerStyle}\n              />\n            </SwapContextProvider>\n          </DexContextProvider>\n        </TokenContextProvider>\n      </TokenListContextProvider>\n    </ThemeProvider>\n  );\n}\n\n/**\n * Properties for the `Swap` Component.\n */\nexport type SwapProps = {\n  /**\n   * Wallet and network provider. Apps can use a `Provider` subclass to hook\n   * into all transactions intitiated by the component.\n   */\n  provider: Provider;\n\n  /**\n   * Token list providing information for tokens used.\n   */\n  tokenList: TokenListContainer;\n\n  /**\n   * List of token address that should show up as common base tokens\n   */\n  commonBases?: PublicKey[];\n\n  /**\n   * Wallet address to which referral fees are sent (i.e. a SOL address).\n   * To receive referral fees, the wallet must *own* associated token\n   * accounts for the token in which the referral is paid  (usually USDC\n   * or USDT).\n   */\n  referral?: 'BejS9yTooghA7jJfXZap3EVP52yQDSkekZW6kzFRwadt';\n\n  /**\n   * The default `fromMint` to use when the component first renders.\n   */\n  fromMint?: PublicKey;\n\n  /**\n   * The default `toMint` to use when the component first renders.\n   */\n  toMint?: PublicKey;\n\n  /**\n   * The initial amount for the `fromMint` to use when the component first\n   * renders.\n   */\n  fromAmount?: number;\n\n  /**\n   * The initial amount for the `toMint` to use when the component first\n   * renders.\n   */\n  toAmount?: number;\n\n  /**\n   * Provide custom material-ui theme.\n   */\n  materialTheme?: ThemeOptions;\n\n  /**\n   * Styling properties for the main container.\n   */\n  containerStyle?: any;\n\n  /**\n   * Styling properties for the content container.\n   */\n  contentStyle?: any;\n\n  /**\n   * Styling properties for the from and to token containers.\n   */\n  swapTokenContainerStyle?: any;\n};\n\nexport {\n  // Components.\n  Swap,\n  SwapCard,\n  SwapHeader,\n  SwapTokenForm,\n  ArrowButton,\n  SwapButton,\n  TokenDialog,\n  // Providers and context.\n  // Swap.\n  SwapContextProvider,\n  useSwapContext,\n  useSwapFair,\n  // TokenList.\n  TokenListContextProvider,\n  useTokenMap,\n  // Token.\n  TokenContextProvider,\n  useMint,\n  // Dex.\n  DexContextProvider,\n  useFairRoute,\n  useMarketName,\n  useBbo,\n};\n","import \"@fontsource/roboto\";\nimport { useState, useEffect, useMemo } from \"react\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport { Provider } from \"@project-serum/anchor\";\n// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n  Signer,\n  ConfirmOptions,\n  Connection,\n  Transaction,\n  TransactionSignature,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport {\n  TokenListContainer,\n  TokenListProvider,\n} from \"./spl-token-registry\";\nimport Swap from \"@project-serum/swap-ui\";\nimport \"./App.css\";\n\nimport { ConnectionProvider, WalletProvider, useWallet, useConnection } from '@solana/wallet-adapter-react';\nimport {\n  getPhantomWallet,\n  getSolletWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  WalletDialogProvider as MaterialUIWalletDialogProvider,\n  WalletMultiButton as MaterialUIWalletMultiButton,\n} from '@solana/wallet-adapter-material-ui';\n\n// App illustrating the use of the Swap component.\n//\n// One needs to just provide an Anchor `Provider` and a `TokenListContainer`\n// to the `Swap` component, and then everything else is taken care of.\nfunction App() {\n\n  const network = \"https://solana-api.projectserum.com\";\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolletWallet({ network: \"htpps://api.devnet.solana.com\" as WalletAdapterNetwork }),\n    ],\n    []\n  );\n\n  return (\n    <ConnectionProvider endpoint={network}>\n      <WalletProvider wallets={wallets} >\n        <MaterialUIWalletDialogProvider style={{backgroundColor: 'white', color: 'red'}}>\n          <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n            <AppInner />\n          </SnackbarProvider>\n        </MaterialUIWalletDialogProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: \"100vh\",\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n  },\n}));\n\nfunction AppInner() {\n  const styles = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [isConnected, setIsConnected] = useState(false);\n  const [tokenList, setTokenList] = useState<TokenListContainer | null>(null);\n  \n  \n  let commonBases: PublicKey[] = [\n    new PublicKey(\"2vRgBSJEVPXxayrhXoazQyCKSGFYQG3ZdfT2Gv5gZykL\"),\n    new PublicKey(\"Aw8qLRHGhMcKq7rxs5XBNCd9oe3BvoAhpNMVz7AdGmty\"),\n    new PublicKey(\"A9UhP1xfQHWUhSd54NgKPub2XB3ZuQMdPEvf9aMTHxGT\"),\n    new PublicKey(\"GLmaRDRmYd4u3YLfnj9eq1mrwxa1YfSweZYYZXZLTRdK\"),\n  ];\n\n\n  const opts: ConfirmOptions = {\n    preflightCommitment: \"recent\"\n  }\n  const newWallet = useWallet();\n  const { connection: newConnection } = useConnection();\n  const newProvider = new Provider(newConnection, newWallet as AnchorWallet, opts);\n\n  const [provider, wallet] = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const network = \"https://solana-api.projectserum.com\";\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new NotifyingProvider(\n      connection,\n      wallet,\n      opts,\n      (tx, err) => {\n        if (err) {\n          enqueueSnackbar(`Error: ${err.toString()}`, {\n            variant: \"error\",\n          });\n        } else {\n          enqueueSnackbar(\"Transaction sent\", {\n            variant: \"success\",\n            action: (\n              <Button\n                color=\"inherit\"\n                component=\"a\"\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={`https://explorer.solana.com/tx/${tx}`}\n              >\n                View on Solana Explorer\n              </Button>\n            ),\n          });\n        }\n      }\n    );\n    return [provider, wallet];\n  }, [enqueueSnackbar]);\n\n  useEffect(() => {\n    new TokenListProvider().resolve().then(setTokenList);\n  }, [setTokenList]);\n\n  // Connect to the wallet.\n  useEffect(() => {\n    wallet.on(\"connect\", () => {\n      enqueueSnackbar(\"Wallet connected\", { variant: \"success\" });\n      setIsConnected(true);\n    });\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Wallet disconnected\", { variant: \"info\" });\n      setIsConnected(false);\n    });\n  }, [wallet, enqueueSnackbar]);\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      className={styles.root}\n    >\n      <MaterialUIWalletMultiButton  style={{ position: \"fixed\", right: 24, top: 24 }}/>\n\n      {tokenList && (\n        <Swap\n          provider={provider}\n          tokenList={tokenList}\n          commonBases={commonBases}\n        />\n      )}\n    </Grid>\n  );\n}\n\n// Cast wallet to AnchorWallet in order to be compatible with Anchor's Provider class\ninterface AnchorWallet {\n  signTransaction(tx: Transaction): Promise<Transaction>;\n  signAllTransactions(txs: Transaction[]): Promise<Transaction[]>;\n  publicKey: PublicKey;\n}\n\n// Custom provider to display notifications whenever a transaction is sent.\n//\n// Note that this is an Anchor wallet/network provider--not a React provider,\n// so all transactions will be flowing through here, which allows us to\n// hook in to display all transactions sent from the `Swap` component\n// as notifications in the parent app.\nclass NotifyingProvider extends Provider {\n  // Function to call whenever the provider sends a transaction;\n  private onTransaction: (\n    tx: TransactionSignature | undefined,\n    err?: Error\n  ) => void;\n\n  constructor(\n    connection: Connection,\n    wallet: Wallet,\n    opts: ConfirmOptions,\n    onTransaction: (tx: TransactionSignature | undefined, err?: Error) => void\n  ) {\n    const newWallet = wallet as AnchorWallet;\n    super(connection, newWallet, opts);\n    this.onTransaction = onTransaction;\n  }\n\n  async send(\n    tx: Transaction,\n    signers?: Array<Signer | undefined>,\n    opts?: ConfirmOptions\n  ): Promise<TransactionSignature> {\n    try {\n      const txSig = await super.send(tx, signers, opts);\n      this.onTransaction(txSig);\n      return txSig;\n    } catch (err) {\n      if (err instanceof Error || err === undefined) {\n        this.onTransaction(undefined, err);\n      }\n      return \"\";\n    }\n  }\n\n  async sendAll(\n    txs: Array<{ tx: Transaction; signers: Array<Signer | undefined> }>,\n    opts?: ConfirmOptions\n  ): Promise<Array<TransactionSignature>> {\n    try {\n      const txSigs = await super.sendAll(txs, opts);\n      txSigs.forEach((sig) => {\n        this.onTransaction(sig);\n      });\n      return txSigs;\n    } catch (err) {\n      if (err instanceof Error || err === undefined) {\n        this.onTransaction(undefined, err);\n      }\n      return [];\n    }\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}